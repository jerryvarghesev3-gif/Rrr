package com.connect.connection

import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.view.View
import android.widget.*
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import info.mqtt.android.service.MqttAndroidClient
import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken
import org.eclipse.paho.client.mqttv3.MqttCallbackExtended
import org.eclipse.paho.client.mqttv3.MqttMessage
import org.json.JSONObject

class SummaryBActivity : AppCompatActivity() {

    // ---- UI ----
    private lateinit var txtGateway: TextView
    private lateinit var txtBed: TextView
    private lateinit var txtLocation: TextView
    private lateinit var txtInfo: TextView
    private lateinit var imgPreview: ImageView
    private lateinit var btnRescan: Button
    private lateinit var btnCancel: Button
    private lateinit var btnContinue: Button
    private lateinit var progress: ProgressBar

    // ---- Data from BActivity / scanner ----
    private var gatewayId = ""
    private var bedId = ""
    private var locationId = ""
    private var imageUri: Uri? = null

    // ---- MQTT ----
    private val mqtt: MqttAndroidClient? get() = MqttHolder.client

    private fun cmdTopicSetLoc(gw: String) = "gw/$gw/cmd/set_location"
    private fun respTopicBed(bed: String)   = "bed/$bed/resp/set_location"
    private fun topicKlmDetails(gw: String) = "gw/$gw/json/klm_details/sensor"

    // ---- KLM step (optional) ----
    private var klmScanned: String? = null
    private var klmFromTopic: String? = null
    private var klmVerified = false
    private var klmGate = false // make sure we only proceed once

    private val scanKlmLauncher =
        registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { res ->
            if (res.resultCode == RESULT_OK) {
                klmScanned = res.data?.getStringExtra(QRKLMAcitivity.EXTRA_KLM_SCAN).orEmpty()
                if (!klmScanned.isNullOrBlank()) {
                    // read JSON once and compare
                    subscribeKlmDetails()
                } else {
                    proceedAfterKlm()
                }
            } else {
                proceedAfterKlm()
            }
        }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_summary_b)

        // ---- bind views ----
        txtGateway  = findViewById(R.id.txtGatewayB)
        txtBed      = findViewById(R.id.txtBedB)
        txtLocation = findViewById(R.id.txtLocationB)
        txtInfo     = findViewById(R.id.txtInfoB)
        imgPreview  = findViewById(R.id.imgPreviewB)
        btnRescan   = findViewById(R.id.btnRescanB)
        btnCancel   = findViewById(R.id.btnCancelB)
        btnContinue = findViewById(R.id.btnContinueB)
        progress    = findViewById(R.id.progressB)

        // ---- read extras (keys shared from QRBActivity) ----
        gatewayId  = intent.getStringExtra(QRBActivity.EXTRA_GATEWAY).orEmpty()
        bedId      = intent.getStringExtra(QRBActivity.EXTRA_BED).orEmpty()
        locationId = intent.getStringExtra(QRBActivity.EXTRA_LOCATION).orEmpty()
        intent.getStringExtra(QRBActivity.EXTRA_IMAGE_URI)?.let { imageUri = Uri.parse(it) }

        // ---- populate header ----
        txtGateway.text  = "Gateway: $gatewayId"
        txtBed.text      = "Bed ID: $bedId"
        txtLocation.text = "Location ID: $locationId"
        imageUri?.let { imgPreview.setImageURI(it) }

        // ---- buttons ----
        btnRescan.setOnClickListener { finish() }              // back to B scanner
        btnCancel.setOnClickListener { finish() }              // same as back
        btnContinue.setOnClickListener { promptKlmVerify() }   // NEW: popup first
    }

    // ---------- KLM popup + scan ----------
    private fun promptKlmVerify() {
        AlertDialog.Builder(this)
            .setMessage("Verify KLM now?")
            .setPositiveButton("Yes") { _, _ -> launchKlmScan() }
            .setNegativeButton("No")  { _, _ -> proceedAfterKlm() }
            .setCancelable(false)
            .show()
    }

    private fun launchKlmScan() {
        scanKlmLauncher.launch(Intent(this, QRKLMAcitivity::class.java))
    }

    private fun subscribeKlmDetails() {
        val c = mqtt
        if (c == null || !c.isConnected) { proceedAfterKlm(); return }

        try {
            c.setCallback(object : MqttCallbackExtended {
                override fun connectComplete(reconnect: Boolean, serverURI: String?) {}
                override fun connectionLost(cause: Throwable?) {}
                override fun deliveryComplete(token: IMqttDeliveryToken?) {}

                override fun messageArrived(topic: String?, message: MqttMessage?) {
                    if (topic != topicKlmDetails(gatewayId)) return
                    val json = message?.toString().orEmpty()
                    handleKlmJson(json)
                    runOnUiThread { proceedAfterKlm() }
                }
            })
            c.subscribe(topicKlmDetails(gatewayId), 1, null, null)
        } catch (_: Exception) {
            proceedAfterKlm()
        }
    }

    private fun handleKlmJson(json: String) {
        try {
            val root = JSONObject(json)
            val klm  = root.optJSONObject("klm")
            val id   = klm?.optString("id").orEmpty()
            if (id.isNotBlank()) {
                klmFromTopic = id
                klmVerified  = (klmScanned != null && klmScanned == klmFromTopic)
            }
        } catch (_: Exception) { /* ignore */ }
    }

    private fun proceedAfterKlm() {
        if (klmGate) return
        klmGate = true
        onContinueCore()
    }

    // ---------- YOUR ORIGINAL CONTINUE WORK (publish set_location etc.) ----------
    private fun onContinueCore() {
        if (gatewayId.isBlank() || bedId.isBlank() || locationId.isBlank()) {
            Toast.makeText(this, "Missing IDs", Toast.LENGTH_SHORT).show()
            return
        }

        val c = mqtt
        if (c == null || !c.isConnected) {
            Toast.makeText(this, "MQTT not connected", Toast.LENGTH_SHORT).show()
            return
        }

        setBusy(true, "Setting locationâ€¦")

        try {
            val respTopic = respTopicBed(bedId)

            c.setCallback(object : MqttCallbackExtended {
                override fun connectComplete(reconnect: Boolean, serverURI: String?) {}
                override fun connectionLost(cause: Throwable?) {}
                override fun deliveryComplete(token: IMqttDeliveryToken?) {}

                override fun messageArrived(topic: String?, message: MqttMessage?) {
                    if (topic != respTopic) return
                    val ok = parseSetLocOk(message?.toString().orEmpty())
                    runOnUiThread {
                        setBusy(false, if (ok) "Success" else "Failed")
                        if (ok) {
                            // Navigate to final summary, carry KLM result
                            val i = Intent(this@SummaryBActivity, SummaryActivity::class.java).apply {
                                putExtra(QRBActivity.EXTRA_GATEWAY,  gatewayId)
                                putExtra(QRBActivity.EXTRA_BED,      bedId)
                                putExtra(QRBActivity.EXTRA_LOCATION, locationId)
                                imageUri?.toString()?.let { putExtra(QRBActivity.EXTRA_IMAGE_URI, it) }
                                putExtra(QRKLMAcitivity.EXTRA_KLM_SCAN,     klmScanned ?: "")
                                putExtra(QRKLMAcitivity.EXTRA_KLM_VERIFIED, klmVerified)
                            }
                            startActivity(i)
                        } else {
                            Toast.makeText(this@SummaryBActivity, "set_location failed", Toast.LENGTH_LONG).show()
                        }
                    }
                }
            })

            // subscribe for the bed response, then publish
            c.subscribe(respTopic, 1, null, null)

            val payload = JSONObject().apply {
                put("bed_id", bedId)
                put("location_id", locationId)
            }.toString().toByteArray()

            c.publish(cmdTopicSetLoc(gatewayId), payload, 1, false)

        } catch (t: Throwable) {
            setBusy(false, "")
            Toast.makeText(this, "Error: ${t.message}", Toast.LENGTH_LONG).show()
        }
    }

    private fun parseSetLocOk(json: String): Boolean {
        return try {
            val root = JSONObject(json)
            root.optBoolean("success", false) ||
            root.optString("status").equals("ok", ignoreCase = true)
        } catch (_: Exception) { false }
    }

    // ---- UI helpers ----
    private fun setBusy(busy: Boolean, message: String) {
        txtInfo.text = message
        progress.visibility = if (busy) View.VISIBLE else View.GONE
        btnContinue.isEnabled = !busy
        btnRescan.isEnabled = !busy
        btnCancel.isEnabled = !busy
    }

    override fun onDestroy() {
        super.onDestroy()
        try { mqtt?.setCallback(null) } catch (_: Exception) {}
    }
}









<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:orientation="vertical"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:padding="16dp"
    android:background="#002B5B">

    <TextView
        android:id="@+id/txtGatewayB"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Gateway:"
        android:textColor="@android:color/white"
        android:textSize="18sp"
        android:textStyle="bold"/>

    <TextView
        android:id="@+id/txtBedB"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Bed ID:"
        android:textColor="@android:color/white"
        android:textSize="18sp"
        android:layout_marginTop="6dp"/>

    <TextView
        android:id="@+id/txtLocationB"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Location ID:"
        android:textColor="@android:color/white"
        android:textSize="18sp"
        android:layout_marginTop="6dp"/>

    <TextView
        android:id="@+id/txtInfoB"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text=""
        android:textColor="@android:color/white"
        android:textSize="16sp"
        android:layout_marginTop="6dp"/>

    <ImageView
        android:id="@+id/imgPreviewB"
        android:layout_width="match_parent"
        android:layout_height="220dp"
        android:layout_marginTop="16dp"
        android:adjustViewBounds="true"
        android:scaleType="centerCrop"
        android:background="@android:color/darker_gray" />

    <!-- Buttons row -->
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:gravity="center"
        android:layout_marginTop="24dp">

        <Button
            android:id="@+id/btnRescanB"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="RESCAN" />

        <Button
            android:id="@+id/btnCancelB"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:layout_marginStart="8dp"
            android:layout_marginEnd="8dp"
            android:text="CANCEL" />

        <Button
            android:id="@+id/btnContinueB"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="CONTINUE" />
    </LinearLayout>

    <ProgressBar
        android:id="@+id/progressB"
        style="?android:attr/progressBarStyleLarge"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="24dp"
        android:visibility="gone"/>

</LinearLayout>










package com.connect.connection

import android.net.Uri
import android.os.Bundle
import android.widget.Button
import android.widget.ImageView
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity

class SummaryActivity : AppCompatActivity() {

    private lateinit var txtSummary: TextView
    private lateinit var imgPreview: ImageView
    private lateinit var btnDone: Button

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_summary)

        txtSummary = findViewById(R.id.txtSummary)
        imgPreview = findViewById(R.id.imgPreview)
        btnDone    = findViewById(R.id.btnDone)

        val gatewayId  = intent.getStringExtra(QRBActivity.EXTRA_GATEWAY).orEmpty()
        val bedId      = intent.getStringExtra(QRBActivity.EXTRA_BED).orEmpty()
        val locationId = intent.getStringExtra(QRBActivity.EXTRA_LOCATION).orEmpty()
        val imageUri   = intent.getStringExtra(QRBActivity.EXTRA_IMAGE_URI)?.let { Uri.parse(it) }

        val klmId      = intent.getStringExtra(QRKLMAcitivity.EXTRA_KLM_SCAN).orEmpty()
        val klmOk      = intent.getBooleanExtra(QRKLMAcitivity.EXTRA_KLM_VERIFIED, false)

        val b = StringBuilder()
        b.appendLine("Gateway: $gatewayId")
        b.appendLine("Bed ID: $bedId")
        b.appendLine("Location: $locationId")
        if (klmId.isNotBlank()) {
            b.appendLine("KLM ID: $klmId")
            b.appendLine("KLM Status: ${if (klmOk) "Verified âœ…" else "Not verified"}")
        }
        txtSummary.text = b.toString()

        imageUri?.let { imgPreview.setImageURI(it) }

        btnDone.setOnClickListener { finishAffinity() }
    }
}









<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:orientation="vertical"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:padding="16dp"
    android:background="#002B5B"
    android:gravity="center_horizontal">

    <ImageView
        android:id="@+id/imgPreview"
        android:layout_width="260dp"
        android:layout_height="260dp"
        android:layout_marginTop="8dp"
        android:adjustViewBounds="true"
        android:scaleType="centerCrop"
        android:background="@android:color/darker_gray" />

    <TextView
        android:id="@+id/txtSummary"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:textColor="@android:color/white"
        android:textSize="18sp"
        android:layout_marginTop="16dp" />

    <Button
        android:id="@+id/btnDone"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="DONE"
        android:layout_marginTop="24dp" />

</LinearLayout>








