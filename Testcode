ll


// add default so existing calls still compile
private fun sendSetLocation(force: Boolean = false) {
    val c = MqttHolder.readyClientOrNull()
    if (c == null) { ui { Toast.makeText(this, "MQTT not connected", Toast.LENGTH_SHORT).show() }; return }

    lastTxnSetLoc += 1

    val data = JSONObject()
        .put("bed_id", bedId)
        .put("force", force)              // << include the override flag
        .put("location_id", locationId)

    val req = JSONObject()
        .put("command_id", "set_location")
        .put("data", data)
        .put("reply_to", topicSetLocationResp(bedId))
        .put("transaction_id", lastTxnSetLoc)

    val payload = req.toString().toByteArray(Charsets.UTF_8)

    c.publish(
        topicSetLocationReq(gatewayId),
        payload,
        1,           // qos
        false,       // retained
        null,
        object : IMqttActionListener {
            override fun onSuccess(asyncActionToken: IMqttToken?) {
                ui { txtInfo.text = "Sent set_location (tx=$lastTxnSetLoc)" }
            }
            override fun onFailure(asyncActionToken: IMqttToken?, exception: Throwable?) {
                ui { Toast.makeText(this@QRBActivity, "Publish failed: ${exception?.message}", Toast.LENGTH_SHORT).show() }
                btnAdd.isEnabled = true
            }
        }
    )
}
