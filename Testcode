package com.connect.connection

import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.view.View
import android.widget.Button
import android.widget.ImageView
import android.widget.ProgressBar
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import info.mqtt.android.service.MqttAndroidClient
import org.eclipse.paho.client.mqttv3.IMqttActionListener
import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken
import org.eclipse.paho.client.mqttv3.MqttCallbackExtended
import org.eclipse.paho.client.mqttv3.MqttMessage
import org.json.JSONObject

class SummaryBActivity : AppCompatActivity() {

    // ---- IDs passed from A and B ----
    private var gatewayId   = ""
    private var bedId       = ""
    private var locationId  = ""
    private var imageUri: Uri? = null

    // ---- UI ----
    private lateinit var txtGateway:  TextView
    private lateinit var txtBed:      TextView
    private lateinit var txtLocation: TextView
    private lateinit var txtInfo:     TextView
    private lateinit var imgPreview:  ImageView
    private lateinit var btnBack:     Button
    private lateinit var btnNext:     Button
    private lateinit var progress:    ProgressBar

    // We assume you already keep a connected client somewhere global (e.g., in MainActivity)
    // Replace this getter with wherever you hold it.
    private val mqttClient: MqttAndroidClient?
        get() = (application as? MqttBus)?.client ?: MqttBus.client
    // If you don’t have an Application subclass, keep the MqttBus singleton with `lateinit var client: MqttAndroidClient`

    // We keep the topic we subscribed to so we can unsubscribe onDestroy.
    private var responseTopic: String? = null

    // No-op callback used when we “clear” a callback (setCallback(null) is not allowed)
    private val NO_OP_CALLBACK = object : MqttCallbackExtended {
        override fun connectComplete(reconnect: Boolean, serverURI: String?) {}
        override fun connectionLost(cause: Throwable?) {}
        override fun messageArrived(topic: String?, message: MqttMessage?) {}
        override fun deliveryComplete(token: IMqttDeliveryToken?) {}
    }

    companion object {
        const val EXTRA_GATEWAY    = "gatewayId"
        const val EXTRA_BED        = "bedId"
        const val EXTRA_LOCATION   = "locationId"
        const val EXTRA_IMAGE_URI  = "imageUri"
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_summary_b)

        // Bind
        txtGateway  = findViewById(R.id.txtGatewayB)
        txtBed      = findViewById(R.id.txtBedB)
        txtLocation = findViewById(R.id.txtLocationB)
        txtInfo     = findViewById(R.id.txtInfoB)
        imgPreview  = findViewById(R.id.imgPreviewB)
        btnBack     = findViewById(R.id.btnBackB)
        btnNext     = findViewById(R.id.btnNextB)
        progress    = findViewById(R.id.progressB)

        // Read extras
        gatewayId  = intent.getStringExtra(EXTRA_GATEWAY).orEmpty()
        bedId      = intent.getStringExtra(EXTRA_BED).orEmpty()
        locationId = intent.getStringExtra(EXTRA_LOCATION).orEmpty()
        intent.getStringExtra(EXTRA_IMAGE_URI)?.let { imageUri = Uri.parse(it) }

        // Show
        txtGateway.text  = "Gateway: $gatewayId"
        txtBed.text      = "Bed ID: $bedId"
        txtLocation.text = "Location ID: $locationId"
        imageUri?.let { imgPreview.setImageURI(it) }

        btnBack.setOnClickListener { finish() }

        btnNext.setOnClickListener {
            if (gatewayId.isEmpty() || bedId.isEmpty() || locationId.isEmpty()) {
                Toast.makeText(this, "Missing IDs", Toast.LENGTH_SHORT).show()
                return@setOnClickListener
            }
            setUiBusy(true, "Setting location…")
            subscribeForReplyAndSend(force = false)
        }
    }

    // --- MQTT: subscribe to bed response and publish set_location ---
    private fun subscribeForReplyAndSend(force: Boolean) {
        val client = mqttClient ?: run {
            setUiBusy(false, "MQTT not connected")
            return
        }

        val resp = respTopicFor(bedId)
        responseTopic = resp

        // 1) subscribe (idempotent if already subscribed)
        client.subscribe(resp, 1, /*userContext*/ null, object : IMqttActionListener {
            override fun onSuccess(asyncActionToken: org.eclipse.paho.client.mqttv3.IMqttToken?) {
                // 2) install topic-filtering callback
                client.setCallback(object : MqttCallbackExtended {
                    override fun connectComplete(reconnect: Boolean, serverURI: String?) {}
                    override fun connectionLost(cause: Throwable?) {}

                    override fun messageArrived(topic: String?, message: MqttMessage?) {
                        if (topic == responseTopic) {
                            val payload = message?.toString().orEmpty()
                            runOnUiThread { handleSetLocationResponse(payload) }
                        }
                    }

                    override fun deliveryComplete(token: IMqttDeliveryToken?) {}
                })

                // 3) send command
                publishSetLocation(force)
            }

            override fun onFailure(
                asyncActionToken: org.eclipse.paho.client.mqttv3.IMqttToken?,
                exception: Throwable?
            ) {
                setUiBusy(false, "Subscribe failed: ${exception?.message}")
            }
        })
    }

    private fun publishSetLocation(force: Boolean) {
        val client = mqttClient ?: run {
            setUiBusy(false, "MQTT not connected")
            return
        }

        val reqTopic = reqTopicFor(gatewayId)

        val data = JSONObject().apply {
            put("bedId", bedId)
            put("locationId", locationId)
            put("force", force)
        }
        val req = JSONObject().apply {
            put("command", "set_location")
            put("data", data)
        }
        val payload = req.toString().toByteArray(Charsets.UTF_8)

        client.publish(reqTopic, payload, /*qos*/ 1, /*retained*/ false, /*userContext*/ null,
            object : IMqttActionListener {
                override fun onSuccess(asyncActionToken: org.eclipse.paho.client.mqttv3.IMqttToken?) {
                    // now we’re waiting for the response on the bed topic
                    txtInfo.text = "Waiting for response…"
                }

                override fun onFailure(
                    asyncActionToken: org.eclipse.paho.client.mqttv3.IMqttToken?,
                    exception: Throwable?
                ) {
                    setUiBusy(false, "Publish failed: ${exception.message}")
                }
            }
        )
    }

    // Parse reply JSON and go to final summary
    private fun handleSetLocationResponse(json: String) {
        try {
            val root   = JSONObject(json)
            val status = root.optInt("status", -1)

            // Some servers echo the location back in data; prefer it if present
            val locFromResp = root.optJSONObject("data")
                ?.optString("locationId")
                ?.takeIf { !it.isNullOrBlank() }

            val finalLoc = locFromResp ?: locationId

            val i = Intent(this, SummaryActivity::class.java).apply {
                putExtra("gatewayId",  gatewayId)
                putExtra("bedId",      bedId)
                putExtra("locationId", finalLoc)
                putExtra("status",     status)
                addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_SINGLE_TOP)
            }
            startActivity(i)
            finish()
        } catch (t: Throwable) {
            setUiBusy(false, "Response parse error: ${t.message}")
        }
    }

    // Topics (match your backend)
    private fun reqTopicFor(gw: String)   = "gw/$gw/req/set_location"
    private fun respTopicFor(bed: String) = "bed/$bed/resp/set_location"

    private fun setUiBusy(busy: Boolean, msg: String) {
        txtInfo.text = msg
        progress.visibility = if (busy) View.VISIBLE else View.GONE
        btnNext.isEnabled = !busy
    }

    override fun onDestroy() {
        super.onDestroy()
        // Clean up: unsubscribe the response topic and install a no-op callback
        try {
            val c = mqttClient
            responseTopic?.let { topic -> c?.unsubscribe(topic) }
            c?.setCallback(NO_OP_CALLBACK)
        } catch (_: Exception) { }
    }
}






package com.connect.connection

import android.os.Bundle
import android.widget.Button
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity

class SummaryActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_summary)

        val status      = intent.getIntExtra("status", -1)
        val gatewayId   = intent.getStringExtra("gatewayId") ?: ""
        val bedId       = intent.getStringExtra("bedId") ?: ""
        val locationId  = intent.getStringExtra("locationId") ?: ""

        val txt = findViewById<TextView>(R.id.summaryText)
        txt.text = buildString {
            appendLine(if (status == 0) "✅ Location set OK" else "❌ set_location failed (status=$status)")
            appendLine("Gateway: $gatewayId")
            appendLine("Bed ID: $bedId")
            appendLine("Location ID: $locationId")
        }

        findViewById<Button>(R.id.btnDone).setOnClickListener {
            // Close the app completely (your requirement)
            finishAffinity()
        }
    }
}




<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fillViewport="true"
    android:background="#121212">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="16dp">

        <TextView
            android:id="@+id/txtGatewayB"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="Gateway:"
            android:textColor="@android:color/white"
            android:textSize="18sp"
            android:paddingTop="8dp" />

        <TextView
            android:id="@+id/txtBedB"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="Bed ID:"
            android:textColor="@android:color/white"
            android:textSize="18sp"
            android:paddingTop="8dp" />

        <TextView
            android:id="@+id/txtLocationB"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="Location ID:"
            android:textColor="@android:color/white"
            android:textSize="18sp"
            android:paddingTop="8dp" />

        <ImageView
            android:id="@+id/imgPreviewB"
            android:layout_width="match_parent"
            android:layout_height="160dp"
            android:layout_marginTop="12dp"
            android:scaleType="centerCrop"
            android:background="#222" />

        <TextView
            android:id="@+id/txtInfoB"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="Ready"
            android:textColor="@android:color/white"
            android:paddingTop="12dp" />

        <ProgressBar
            android:id="@+id/progressB"
            style="?android:attr/progressBarStyleHorizontal"
            android:layout_width="match_parent"
            android:layout_height="4dp"
            android:indeterminate="true"
            android:visibility="gone"
            android:layout_marginTop="8dp" />

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:gravity="center"
            android:layout_marginTop="16dp">

            <Button
                android:id="@+id/btnBackB"
                android:layout_width="0dp"
                android:layout_weight="1"
                android:layout_height="wrap_content"
                android:text="BACK" />

            <View
                android:layout_width="12dp"
                android:layout_height="1dp" />

            <Button
                android:id="@+id/btnNextB"
                android:layout_width="0dp"
                android:layout_weight="1"
                android:layout_height="wrap_content"
                android:text="NEXT" />
        </LinearLayout>

    </LinearLayout>
</ScrollView>




<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:orientation="vertical"
    android:padding="16dp"
    android:background="#121212"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <TextView
        android:id="@+id/summaryText"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_weight="1"
        android:text="Summary will appear here"
        android:textColor="@android:color/white"
        android:textSize="18sp" />

    <Button
        android:id="@+id/btnDone"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="DONE" />
</LinearLayout>





