<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <!-- Fullscreen Camera Preview -->
    <androidx.camera.view.PreviewView
        android:id="@+id/previewView"
        android:layout_width="0dp"
        android:layout_height="0dp"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

    <!-- Live decoded text -->
    <TextView
        android:id="@+id/txtScanValue"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text=""
        android:textColor="@android:color/white"
        android:textSize="18sp"
        android:padding="12dp"
        android:background="#66000000"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

    <!-- Bottom buttons -->
    <LinearLayout
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:padding="12dp"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent">

        <Button
            android:id="@+id/btnRescan"
            android:layout_width="0dp"
            android:layout_height="48dp"
            android:layout_weight="1"
            android:text="RESCAN"/>

        <Space
            android:layout_width="12dp"
            android:layout_height="0dp"/>

        <Button
            android:id="@+id/btnContinue"
            android:layout_width="0dp"
            android:layout_height="48dp"
            android:layout_weight="1"
            android:text="CONTINUE"/>

        <Space
            android:layout_width="12dp"
            android:layout_height="0dp"/>

        <Button
            android:id="@+id/btnCancel"
            android:layout_width="0dp"
            android:layout_height="48dp"
            android:layout_weight="1"
            android:text="CANCEL"/>
    </LinearLayout>

</androidx.constraintlayout.widget.ConstraintLayout>





package com.connect.connection

import android.Manifest
import android.content.Intent
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Bundle
import android.util.Size
import android.widget.Button
import android.widget.TextView
import android.widget.Toast
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import androidx.camera.core.*
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import androidx.core.content.ContextCompat
import androidx.core.content.FileProvider
import com.google.mlkit.vision.barcode.Barcode
import com.google.mlkit.vision.barcode.BarcodeScannerOptions
import com.google.mlkit.vision.barcode.BarcodeScanning
import com.google.mlkit.vision.common.InputImage
import java.io.File
import java.text.SimpleDateFormat
import java.util.Locale
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors
import java.util.concurrent.atomic.AtomicBoolean

class QRActivity : AppCompatActivity() {

    private lateinit var previewView: PreviewView
    private lateinit var txtScanValue: TextView
    private lateinit var btnRescan: Button
    private lateinit var btnContinue: Button
    private lateinit var btnCancel: Button

    private lateinit var cameraExecutor: ExecutorService
    private var imageCapture: ImageCapture? = null
    private var analysis: ImageAnalysis? = null

    private val analyzing = AtomicBoolean(true)
    private var lastDecoded: String? = null

    private val requestCameraPerm = registerForActivityResult(
        ActivityResultContracts.RequestPermission()
    ) { granted ->
        if (granted) startCamera() else {
            Toast.makeText(this, "Camera permission denied", Toast.LENGTH_LONG).show()
            finish()
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_qra)

        previewView = findViewById(R.id.previewView)
        txtScanValue = findViewById(R.id.txtScanValue)
        btnRescan = findViewById(R.id.btnRescan)
        btnContinue = findViewById(R.id.btnContinue)
        btnCancel = findViewById(R.id.btnCancel)

        cameraExecutor = Executors.newSingleThreadExecutor()

        btnRescan.setOnClickListener {
            lastDecoded = null
            txtScanValue.text = ""
            analyzing.set(true)
        }
        btnCancel.setOnClickListener { finish() }
        btnContinue.setOnClickListener {
            val value = lastDecoded
            if (value.isNullOrBlank()) {
                Toast.makeText(this, "Scan a QR first", Toast.LENGTH_SHORT).show()
                return@setOnClickListener
            }
            takePhotoAndOpenSummary(value)
        }

        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA)
            == PackageManager.PERMISSION_GRANTED
        ) {
            startCamera()
        } else {
            requestCameraPerm.launch(Manifest.permission.CAMERA)
        }
    }

    private fun startCamera() {
        val cameraProviderFuture = ProcessCameraProvider.getInstance(this)
        cameraProviderFuture.addListener({
            try {
                val cameraProvider = cameraProviderFuture.get()

                val preview = Preview.Builder().build().also {
                    it.setSurfaceProvider(previewView.surfaceProvider)
                }

                imageCapture = ImageCapture.Builder()
                    .setCaptureMode(ImageCapture.CAPTURE_MODE_MINIMIZE_LATENCY)
                    .build()

                val options = BarcodeScannerOptions.Builder()
                    .setBarcodeFormats(
                        Barcode.FORMAT_QR_CODE,
                        Barcode.FORMAT_AZTEC
                    ).build()
                val scanner = BarcodeScanning.getClient(options)

                analysis = ImageAnalysis.Builder()
                    .setTargetResolution(Size(1280, 720))
                    .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)
                    .build().apply {
                        setAnalyzer(cameraExecutor) { proxy ->
                            if (!analyzing.get()) { proxy.close(); return@setAnalyzer }
                            val mediaImage = proxy.image
                            if (mediaImage == null) { proxy.close(); return@setAnalyzer }
                            val image = InputImage.fromMediaImage(
                                mediaImage, proxy.imageInfo.rotationDegrees
                            )
                            scanner.process(image)
                                .addOnSuccessListener { barcodes ->
                                    if (barcodes.isNotEmpty()) {
                                        barcodes.first().rawValue?.let { value ->
                                            if (value.isNotBlank()) {
                                                analyzing.set(false)
                                                lastDecoded = value
                                                runOnUiThread { txtScanValue.text = value }
                                            }
                                        }
                                    }
                                }
                                .addOnCompleteListener { proxy.close() }
                        }
                    }

                val selector = CameraSelector.DEFAULT_BACK_CAMERA
                cameraProvider.unbindAll()
                cameraProvider.bindToLifecycle(
                    this, selector, preview, imageCapture, analysis
                )
            } catch (t: Throwable) {
                Toast.makeText(this, "Camera init failed: ${t.message}", Toast.LENGTH_LONG).show()
                finish()
            }
        }, ContextCompat.getMainExecutor(this))
    }

    private fun takePhotoAndOpenSummary(value: String) {
        val capture = imageCapture ?: run { openSummary(value, null); return }
        val dir = File(cacheDir, "images").apply { mkdirs() }
        val name = SimpleDateFormat("yyyyMMdd_HHmmss", Locale.US)
            .format(System.currentTimeMillis()) + ".jpg"
        val file = File(dir, name)
        val out = ImageCapture.OutputFileOptions.Builder(file).build()

        capture.takePicture(out, cameraExecutor, object : ImageCapture.OnImageSavedCallback {
            override fun onImageSaved(result: ImageCapture.OutputFileResults) {
                val uri = FileProvider.getUriForFile(
                    this@QRActivity,
                    "${applicationContext.packageName}.fileprovider",
                    file
                )
                runOnUiThread { openSummary(value, uri) }
            }
            override fun onError(e: ImageCaptureException) {
                runOnUiThread { openSummary(value, null) }
            }
        })
    }

    private fun openSummary(value: String, uri: Uri?) {
        val i = Intent(this, SummaryAActivity::class.java).apply {
            putExtra("qrA_value", value)
            uri?.let { putExtra("qrA_uri", it.toString()) }
            addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)
        }
        startActivity(i)
    }

    override fun onDestroy() {
        super.onDestroy()
        try { analysis?.clearAnalyzer() } catch (_: Exception) {}
        try { cameraExecutor.shutdown() } catch (_: Exception) {}
    }
}






