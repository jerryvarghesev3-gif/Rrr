package com.connect.connection

import android.app.AlertDialog
import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.widget.Button
import android.widget.ImageView
import android.widget.TextView
import android.widget.Toast
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import info.mqtt.android.service.MqttAndroidClient
import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken
import org.eclipse.paho.client.mqttv3.MqttCallbackExtended
import org.eclipse.paho.client.mqttv3.MqttMessage
import org.json.JSONObject

class SummaryActivity : AppCompatActivity() {

    // ---- UI ----
    private lateinit var txtGateway: TextView
    private lateinit var txtBed: TextView
    private lateinit var txtLocation: TextView
    private lateinit var txtKlm: TextView
    private lateinit var txtKlmStatus: TextView
    private lateinit var imgPreview: ImageView
    private lateinit var btnVerifyKlm: Button
    private lateinit var btnDone: Button

    // ---- Inputs from previous screen(s) ----
    private var gatewayId: String = ""
    private var bedId: String = ""
    private var locationId: String = ""
    private var imageUri: Uri? = null
    private var klmId: String? = null        // optional: if you forwarded it

    // ---- MQTT (for /json/klm_details/sensor) ----
    private val mqtt: MqttAndroidClient? get() = MqttHolder.client
    private var topicKlm: String = ""
    private var klmIdFromTopic: String? = null

    // ---- Scan launcher (KLM QR) ----
    private val scanKlmLauncher =
        registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { res ->
            if (res.resultCode == RESULT_OK) {
                val scanned = res.data?.getStringExtra(QRKLMActivity.EXTRA_KLM_SCAN).orEmpty()
                onKlmScanned(scanned)
            }
        }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_summary)

        // bind views
        txtGateway = findViewById(R.id.txtGateway)
        txtBed = findViewById(R.id.txtBed)
        txtLocation = findViewById(R.id.txtLocation)
        txtKlm = findViewById(R.id.txtKlm)
        txtKlmStatus = findViewById(R.id.txtKlmStatus)
        imgPreview = findViewById(R.id.imgPreview)
        btnVerifyKlm = findViewById(R.id.btnVerifyKlm)
        btnDone = findViewById(R.id.btnDone)

        // read extras (from A/B/KLM activities)
        gatewayId = intent.getStringExtra(QRActivity.EXTRA_GATEWAY).orEmpty()
        bedId = intent.getStringExtra(QRActivity.EXTRA_BED).orEmpty()
        locationId = intent.getStringExtra(QRActivity.EXTRA_LOCATION).orEmpty()
        klmId = intent.getStringExtra( QRKLMActivity.EXTRA_KLM_SCAN ) // may be null if not scanned yet
        intent.getStringExtra(QRActivity.EXTRA_IMAGE_URI)?.let { imageUri = Uri.parse(it) }

        // topic for KLM details (edit if your backend uses a different path)
        topicKlm = "gw/$gatewayId/json/klm_details/sensor"

        // show header
        txtGateway.text = "Gateway: $gatewayId"
        txtBed.text = "Bed ID: $bedId"
        txtLocation.text = "Location ID: $locationId"

        // show image if present
        imageUri?.let { imgPreview.setImageURI(it) }

        // defaults for KLM labels
        if (!klmId.isNullOrEmpty()) {
            txtKlm.text = "KLM ID: $klmId"
            txtKlmStatus.text = "KLM Status: Not verified"
        } else {
            txtKlm.text = "KLM ID: —"
            txtKlmStatus.text = "KLM Status: Not available"
        }

        // Subscribe once so we can read the KLM details JSON (fills klmIdFromTopic)
        subscribeKlmDetails()

        // Verify flow:
        btnVerifyKlm.setOnClickListener {
            if (!klmId.isNullOrEmpty()) {
                // we already have a scanned KLM — verify against details
                onKlmScanned(klmId!!)
            } else {
                // ask user whether to scan now
                AlertDialog.Builder(this)
                    .setMessage("Verify KLM now?")
                    .setPositiveButton("Yes") { _, _ -> launchKlmScan() }
                    .setNegativeButton("No", null)
                    .show()
            }
        }

        // Done = close this summary page
        btnDone.setOnClickListener { finish() }
    }

    override fun onDestroy() {
        super.onDestroy()
        // we only subscribed (no heavy camera resources here)
        try {
            val c = mqtt
            if (c != null && c.isConnected) c.unsubscribe(topicKlm)
        } catch (_: Exception) { }
    }

    // ---------- helpers ----------

    private fun launchKlmScan() {
        scanKlmLauncher.launch(Intent(this, QRKLMActivity::class.java))
    }

    /**
     * Subscribes to the KLM details topic and extracts "klm.id" from the JSON.
     * Example payload (based on your screenshot):
     * {
     *   "bed_info": {"id":"..."},
     *   "location": {"id":"..."},
     *   "klm": { "id":"<KLM-ID>", "verified": -1 },
     *   "value": { ... }
     * }
     */
    private fun subscribeKlmDetails() {
        val c = mqtt
        if (c == null || !c.isConnected) return

        try {
            c.subscribe(topicKlm, 1, null, null)
            c.setCallback(object : MqttCallbackExtended {
                override fun connectComplete(reconnect: Boolean, serverURI: String?) {}
                override fun connectionLost(cause: Throwable?) {}
                override fun deliveryComplete(token: IMqttDeliveryToken?) {}

                override fun messageArrived(topic: String?, message: MqttMessage?) {
                    if (topic != topicKlm) return
                    val json = message?.toString().orEmpty()
                    handleKlmJson(json)
                }
            })
        } catch (t: Throwable) {
            runOnUiThread {
                Toast.makeText(this, "KLM subscribe failed: ${t.message}", Toast.LENGTH_SHORT).show()
            }
        }
    }

    private fun handleKlmJson(json: String) {
        try {
            val root = JSONObject(json)
            val klmObj = root.optJSONObject("klm")
            val id = klmObj?.optString("id").orEmpty()

            if (id.isNotBlank()) {
                klmIdFromTopic = id
                runOnUiThread {
                    // if we didn't have a scanned KLM yet, at least show the one from details
                    if (txtKlm.text.isNullOrBlank() || txtKlm.text == "KLM ID: —") {
                        txtKlm.text = "KLM ID: $id"
                        txtKlmStatus.text = "KLM Status: Not verified"
                    }
                }
            }
        } catch (_: Exception) {
            // ignore malformed payloads
        }
    }

    /**
     * Compare the scanned KLM QR value with the id we received from the details topic.
     * Update the status text + the big summary text accordingly.
     */
    private fun onKlmScanned(scanned: String) {
        if (scanned.isBlank()) {
            Toast.makeText(this, "Empty KLM scan", Toast.LENGTH_SHORT).show()
            return
        }

        // show scanned KLM ID
        txtKlm.text = "KLM ID: $scanned"

        val expected = klmIdFromTopic
        if (expected.isNullOrBlank()) {
            Toast.makeText(this, "KLM details not loaded yet", Toast.LENGTH_SHORT).show()
            return
        }

        val ok = scanned == expected
        txtKlmStatus.text = if (ok) "KLM Status: Verified ✅" else "KLM Status: Mismatch ❌"

        // also reflect in a combined summary text if you want
        val summary = buildString {
            appendLine("Gateway: $gatewayId")
            appendLine("Bed ID: $bedId")
            appendLine("Location: $locationId")
            append("KLM: ${if (ok) "Verified" else "Not Verified"}")
        }
        // If you have a big summary TextView (txtSummary), you can set it here:
        // findViewById<TextView>(R.id.txtSummary).text = summary
    }
}
