package com.connect.connection

import android.Manifest
import android.content.Intent
import android.os.Bundle
import android.view.Surface
import android.widget.TextView
import android.widget.Toast
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import androidx.camera.core.*
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import androidx.core.content.ContextCompat
import com.google.mlkit.vision.barcode.Barcode
import com.google.mlkit.vision.barcode.BarcodeScannerOptions
import com.google.mlkit.vision.barcode.BarcodeScanning
import com.google.mlkit.vision.common.InputImage
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors
import java.util.concurrent.atomic.AtomicBoolean

class KLMScanActivity : AppCompatActivity() {

    companion object {
        const val EXTRA_KLM_SCAN = "klm_scanned_value"
    }

    private lateinit var previewView: PreviewView
    private lateinit var txtHint: TextView

    private lateinit var cameraExecutor: ExecutorService
    private var imageAnalysis: ImageAnalysis? = null

    private val analyzing = AtomicBoolean(false)
    private var lastDecoded: String? = null

    private val requestCameraPerm =
        registerForActivityResult(ActivityResultContracts.RequestPermission()) { granted ->
            if (granted) startCamera() else {
                Toast.makeText(this, "Camera permission required", Toast.LENGTH_LONG).show()
                finish()
            }
        }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_klm_scan)

        previewView = findViewById(R.id.previewKLM)
        txtHint = findViewById(R.id.txtHintKLM)

        cameraExecutor = Executors.newSingleThreadExecutor()

        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA)
            == android.content.pm.PackageManager.PERMISSION_GRANTED
        ) {
            startCamera()
        } else {
            requestCameraPerm.launch(Manifest.permission.CAMERA)
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        try { cameraExecutor.shutdown() } catch (_: Exception) {}
    }

    // ---- Camera + Analyzer ----
    private fun startCamera() {
        val providerFuture = ProcessCameraProvider.getInstance(this)
        providerFuture.addListener({
            val provider = providerFuture.get()

            val preview = Preview.Builder()
                .setTargetRotation(previewView.display?.rotation ?: Surface.ROTATION_0)
                .build().also { it.setSurfaceProvider(previewView.surfaceProvider) }

            imageAnalysis = ImageAnalysis.Builder()
                .setTargetRotation(previewView.display?.rotation ?: Surface.ROTATION_0)
                .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)
                .build()

            val options = BarcodeScannerOptions.Builder()
                .setBarcodeFormats(Barcode.FORMAT_QR_CODE)
                .build()
            val scanner = BarcodeScanning.getClient(options)

            imageAnalysis!!.setAnalyzer(cameraExecutor) { proxy ->
                try {
                    val media = proxy.image ?: run { proxy.close(); return@setAnalyzer }
                    if (analyzing.getAndSet(true)) { proxy.close(); return@setAnalyzer }

                    val image = InputImage.fromMediaImage(media, proxy.imageInfo.rotationDegrees)
                    scanner.process(image)
                        .addOnSuccessListener { codes ->
                            val v = codes.firstOrNull()?.rawValue
                            if (!v.isNullOrBlank() && v != lastDecoded) {
                                lastDecoded = v.trim()
                                sendResultAndFinish(lastDecoded!!)
                            }
                        }
                        .addOnCompleteListener {
                            analyzing.set(false)
                            proxy.close()
                        }
                } catch (_: Throwable) {
                    analyzing.set(false)
                    proxy.close()
                }
            }

            val selector = CameraSelector.DEFAULT_BACK_CAMERA
            provider.unbindAll()
            provider.bindToLifecycle(this, selector, preview, imageAnalysis)
            txtHint.text = "Scan a KLM QR…"
        }, ContextCompat.getMainExecutor(this))
    }

    private fun sendResultAndFinish(value: String) {
        setResult(RESULT_OK, Intent().putExtra(EXTRA_KLM_SCAN, value))
        finish()
    }
}







<?xml version="1.0" encoding="utf-8"?>
<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <androidx.camera.view.PreviewView
        android:id="@+id/previewKLM"
        android:layout_width="match_parent"
        android:layout_height="match_parent" />

    <TextView
        android:id="@+id/txtHintKLM"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_gravity="bottom"
        android:padding="12dp"
        android:text="Scan a KLM QR…"
        android:textColor="@android:color/white"
        android:background="#66000000" />
</FrameLayout>







package com.connect.connection

import android.app.AlertDialog
import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.view.View
import android.widget.Button
import android.widget.ImageView
import android.widget.TextView
import android.widget.Toast
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import info.mqtt.android.service.MqttAndroidClient
import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken
import org.eclipse.paho.client.mqttv3.MqttCallbackExtended
import org.eclipse.paho.client.mqttv3.MqttMessage
import org.json.JSONObject

class SummaryActivity : AppCompatActivity() {

    // UI
    private lateinit var txtSummary: TextView
    private lateinit var txtKlm: TextView
    private lateinit var txtKlmStatus: TextView
    private lateinit var imgPreview: ImageView
    private lateinit var btnDone: Button
    private lateinit var btnVerifyKlm: Button

    // From previous screens
    private var gatewayId = ""
    private var bedId = ""
    private var locationId = ""
    private var imageUri: Uri? = null

    // MQTT
    private val mqtt: MqttAndroidClient? get() = MqttHolder.client
    private val topicKlm = "/json/klm_details/sensor"

    // KLM
    private var klmIdFromTopic: String? = null
    private var klmVerified = false

    // Scanner launcher
    private val scanKlmLauncher =
        registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { res ->
            if (res.resultCode == RESULT_OK) {
                val scanned = res.data?.getStringExtra(KLMScanActivity.EXTRA_KLM_SCAN).orEmpty()
                onKlmScanned(scanned)
            }
        }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_summary) // use your existing layout id

        // bind
        txtSummary = findViewById(R.id.txtSummary)
        txtKlm = findViewById(R.id.txtKlm)
        txtKlmStatus = findViewById(R.id.txtKlmStatus)
        imgPreview = findViewById(R.id.imgPreview)        // if present
        btnDone = findViewById(R.id.btnDone)
        btnVerifyKlm = findViewById(R.id.btnVerifyKlm)    // add a small button or keep hidden & use dialog

        // extras (use the same keys you already use across A/B)
        gatewayId = intent.getStringExtra(QRActivity.EXTRA_GATEWAY).orEmpty()
        bedId = intent.getStringExtra(QRActivity.EXTRA_BED).orEmpty()
        locationId = intent.getStringExtra(QRActivity.EXTRA_LOCATION).orEmpty()
        intent.getStringExtra(QRActivity.EXTRA_IMAGE_URI)?.let { imageUri = Uri.parse(it) }

        // show A/B + image
        val header = "Gateway: $gatewayId\nBed ID: $bedId\nLocation: $locationId"
        txtSummary.text = header
        imageUri?.let { imgPreview.setImageURI(it) }

        // KLM UI placeholders
        txtKlm.text = "KLM ID: —"
        txtKlmStatus.text = "KLM Status: Not verified"

        // wire
        btnVerifyKlm.setOnClickListener { launchKlmScan() }
        btnDone.setOnClickListener { finishAffinity() }

        // listen for KLM json
        subscribeKlmDetails()

        // ask user whether to verify now
        showVerifyDialog()
    }

    override fun onDestroy() {
        super.onDestroy()
        try {
            mqtt?.let { c ->
                if (c.isConnected) c.unsubscribe(topicKlm)
                c.setCallback(null)
            }
        } catch (_: Exception) {}
    }

    private fun showVerifyDialog() {
        AlertDialog.Builder(this)
            .setTitle("Verify KLM?")
            .setMessage("Would you like to scan and verify the KLM now?")
            .setPositiveButton("Yes") { _, _ -> launchKlmScan() }
            .setNegativeButton("No", null)
            .show()
    }

    private fun launchKlmScan() {
        scanKlmLauncher.launch(Intent(this, KLMScanActivity::class.java))
    }

    // ---- MQTT read of /json/klm_details/sensor ----
    private fun subscribeKlmDetails() {
        val c = mqtt
        if (c == null || !c.isConnected) return

        try {
            c.subscribe(topicKlm, 1, null, null)
            c.setCallback(object : MqttCallbackExtended {
                override fun connectComplete(reconnect: Boolean, serverURI: String?) {}
                override fun connectionLost(cause: Throwable?) {}
                override fun deliveryComplete(token: IMqttDeliveryToken?) {}

                override fun messageArrived(topic: String?, message: MqttMessage?) {
                    if (topic != topicKlm) return
                    val json = message?.toString().orEmpty()
                    parseKlmJson(json)
                }
            })
        } catch (t: Throwable) {
            runOnUiThread {
                Toast.makeText(this, "KLM subscribe failed: ${t.message}", Toast.LENGTH_LONG).show()
            }
        }
    }

    private fun parseKlmJson(json: String) {
        try {
            val root = JSONObject(json)
            val klm = root.optJSONObject("klm")
            val id = klm?.optString("id").orEmpty()
            if (id.isNotBlank()) {
                klmIdFromTopic = id
                runOnUiThread {
                    txtKlm.text = "KLM ID: $id"
                }
            }
        } catch (_: Exception) {
            // ignore malformed
        }
    }

    private fun onKlmScanned(scanned: String) {
        if (scanned.isBlank()) {
            Toast.makeText(this, "Empty KLM scan", Toast.LENGTH_SHORT).show()
            return
        }
        val expected = klmIdFromTopic
        if (expected.isNullOrBlank()) {
            Toast.makeText(this, "KLM details not loaded yet", Toast.LENGTH_LONG).show()
            return
        }

        klmVerified = (scanned == expected)
        txtKlmStatus.text = if (klmVerified) "KLM Status: Verified ✅" else "KLM Status: Mismatch ❌"

        // If you also want to reflect in the big summary text:
        txtSummary.text = buildString {
            appendLine("Gateway: $gatewayId")
            appendLine("Bed ID: $bedId")
            appendLine("Location: $locationId")
            append("KLM: ${if (klmVerified) "Verified" else "Not Verified"}")
        }
    }
}





<!-- inside your existing summary layout -->
<TextView
    android:id="@+id/txtKlm"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:text="KLM ID: —"
    android:textSize="16sp"
    android:padding="8dp"
    android:textColor="@android:color/white" />

<TextView
    android:id="@+id/txtKlmStatus"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:text="KLM Status: Not verified"
    android:textSize="16sp"
    android:padding="8dp"
    android:textColor="@android:color/white" />

<Button
    android:id="@+id/btnVerifyKlm"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:text="VERIFY KLM" />






