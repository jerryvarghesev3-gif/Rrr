package com.connect.connection

import android.Manifest
import android.content.Intent
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Bundle
import android.view.Surface
import android.widget.Button
import android.widget.TextView
import android.widget.Toast
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import androidx.camera.core.*
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import androidx.core.content.ContextCompat
import com.google.mlkit.vision.barcode.Barcode
import com.google.mlkit.vision.barcode.BarcodeScannerOptions
import com.google.mlkit.vision.barcode.BarcodeScanning
import com.google.mlkit.vision.common.InputImage
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors
import java.util.concurrent.atomic.AtomicBoolean

class QRBActivity : AppCompatActivity() {

    // ---- views ----
    private lateinit var previewView: PreviewView
    private lateinit var txtScanValue: TextView
    private lateinit var btnRescan: Button
    private lateinit var btnContinue: Button
    private lateinit var btnCancel: Button

    // ---- camera/analyzer ----
    private lateinit var cameraExecutor: ExecutorService
    private var imageCapture: ImageCapture? = null
    private val analyzing = AtomicBoolean(false)
    private var lastDecoded: String? = null

    // ---- ML Kit ----
    private val barcodeOptions = BarcodeScannerOptions.Builder()
        .setBarcodeFormats(Barcode.FORMAT_QR_CODE)
        .build()
    private val barcodeScanner by lazy { BarcodeScanning.getClient(barcodeOptions) }

    // ---- permission ----
    private val requestCameraPerm =
        registerForActivityResult(ActivityResultContracts.RequestPermission()) { granted ->
            if (granted) startCamera() else finish()
        }

    companion object {
        const val EXTRA_GATEWAY     = "gatewayId"
        const val EXTRA_BED         = "bedId"
        const val EXTRA_LOCATION    = "locationId"
        const val EXTRA_IMAGE_URI   = "imageUri"
    }

    // values coming from A/summaryA
    private var gatewayId: String = ""
    private var bedId: String = ""
    private var incomingImageUri: Uri? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_qrb)   // make sure IDs match this file

        // read extras from previous step
        gatewayId = intent.getStringExtra(EXTRA_GATEWAY).orEmpty()
        bedId = intent.getStringExtra(EXTRA_BED).orEmpty()
        incomingImageUri = intent.getStringExtra(EXTRA_IMAGE_URI)?.let { Uri.parse(it) }

        // bind views â€“ IDs must exist in activity_qrb.xml
        previewView  = findViewById(R.id.previewView)
        txtScanValue = findViewById(R.id.txtScanValue)
        btnRescan    = findViewById(R.id.btnRescan)
        btnContinue  = findViewById(R.id.btnContinue)
        btnCancel    = findViewById(R.id.btnCancel)

        txtScanValue.text = "Aim at Location QR"
        btnContinue.isEnabled = false

        cameraExecutor = Executors.newSingleThreadExecutor()

        btnRescan.setOnClickListener {
            lastDecoded = null
            txtScanValue.text = ""
            btnContinue.isEnabled = false
            analyzing.set(true)
        }

        btnCancel.setOnClickListener { finish() }

        btnContinue.setOnClickListener {
            val loc = lastDecoded?.trim().orEmpty()
            if (loc.isEmpty()) {
                Toast.makeText(this, "Scan a Location QR first", Toast.LENGTH_SHORT).show()
                return@setOnClickListener
            }
            openSummaryB(loc)
        }

        // start camera
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA)
            == PackageManager.PERMISSION_GRANTED
        ) startCamera() else requestCameraPerm.launch(Manifest.permission.CAMERA)
    }

    override fun onDestroy() {
        super.onDestroy()
        try { cameraExecutor.shutdown() } catch (_: Exception) {}
    }

    private fun startCamera() {
        val providerFuture = ProcessCameraProvider.getInstance(this)
        providerFuture.addListener({
            val cameraProvider = providerFuture.get()

            val preview = Preview.Builder()
                .setTargetRotation(previewView.display?.rotation ?: Surface.ROTATION_0)
                .build().also { it.setSurfaceProvider(previewView.surfaceProvider) }

            imageCapture = ImageCapture.Builder()
                .setCaptureMode(ImageCapture.CAPTURE_MODE_MINIMIZE_LATENCY)
                .setTargetRotation(previewView.display?.rotation ?: Surface.ROTATION_0)
                .build()

            val analysis = ImageAnalysis.Builder()
                .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)
                .setTargetRotation(previewView.display?.rotation ?: Surface.ROTATION_0)
                .build()

            analysis.setAnalyzer(cameraExecutor) { imageProxy ->
                try {
                    val media = imageProxy.image ?: run { imageProxy.close(); return@setAnalyzer }
                    if (!analyzing.get()) { imageProxy.close(); return@setAnalyzer }

                    val input = InputImage.fromMediaImage(
                        media, imageProxy.imageInfo.rotationDegrees
                    )
                    barcodeScanner.process(input)
                        .addOnSuccessListener { codes ->
                            val v = codes.firstOrNull()?.rawValue
                            if (!v.isNullOrBlank()) {
                                analyzing.set(false)
                                lastDecoded = v.trim()
                                runOnUiThread {
                                    txtScanValue.text = lastDecoded
                                    btnContinue.isEnabled = true
                                }
                            }
                        }
                        .addOnFailureListener { /* ignore; keep analyzing */ }
                        .addOnCompleteListener { imageProxy.close() }
                } catch (t: Throwable) {
                    imageProxy.close()
                }
            }

            val selector = CameraSelector.DEFAULT_BACK_CAMERA
            cameraProvider.unbindAll()
            cameraProvider.bindToLifecycle(
                this, selector, preview, imageCapture, analysis
            )
            analyzing.set(true)
        }, ContextCompat.getMainExecutor(this))
    }

    private fun openSummaryB(locationId: String) {
        val i = Intent(this, SummaryBActivity::class.java).apply {
            putExtra(EXTRA_GATEWAY, gatewayId)
            putExtra(EXTRA_BED, bedId)
            putExtra(EXTRA_LOCATION, locationId)
            incomingImageUri?.let { putExtra(EXTRA_IMAGE_URI, it.toString()) }
        }
        startActivity(i)
    }
}








<androidx.constraintlayout.widget.ConstraintLayout ...>

    <androidx.camera.view.PreviewView
        android:id="@+id/previewView"
        android:layout_width="0dp"
        android:layout_height="0dp"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintBottom_toTopOf="@id/txtScanValue" />

    <TextView
        android:id="@+id/txtScanValue"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:textSize="18sp"
        android:padding="12dp"
        app:layout_constraintTop_toBottomOf="@id/previewView"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />

    <LinearLayout
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="16dp"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent">

        <Button android:id="@+id/btnRescan"   style="@style/Widget.MaterialComponents.Button" android:text="RESCAN" />
        <Button android:id="@+id/btnContinue" style="@style/Widget.MaterialComponents.Button" android:text="CONTINUE" android:layout_marginTop="12dp"/>
        <Button android:id="@+id/btnCancel"   style="@style/Widget.MaterialComponents.Button" android:text="CANCEL" android:layout_marginTop="12dp"/>
    </LinearLayout>

</androidx.constraintlayout.widget.ConstraintLayout>






class SummaryBActivity : AppCompatActivity() {

    companion object {
        const val EXTRA_GATEWAY = QRBActivity.EXTRA_GATEWAY
        const val EXTRA_BED     = QRBActivity.EXTRA_BED
        const val EXTRA_LOCATION= QRBActivity.EXTRA_LOCATION
        const val EXTRA_IMAGE_URI = QRBActivity.EXTRA_IMAGE_URI
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_summary_b)

        val gateway = intent.getStringExtra(EXTRA_GATEWAY).orEmpty()
        val bed     = intent.getStringExtra(EXTRA_BED).orEmpty()
        val loc     = intent.getStringExtra(EXTRA_LOCATION).orEmpty()
        val img     = intent.getStringExtra(EXTRA_IMAGE_URI)?.let { Uri.parse(it) }

        findViewById<TextView>(R.id.txtGatewayB).text  = "Gateway: $gateway"
        findViewById<TextView>(R.id.txtBedB).text      = "Bed ID: $bed"
        findViewById<TextView>(R.id.txtLocationB).text = "Location ID: $loc"
        img?.let { findViewById<ImageView>(R.id.imgPreviewB).setImageURI(it) }

        findViewById<Button>(R.id.btnBackB).setOnClickListener { finish() }
        findViewById<Button>(R.id.btnNextB).setOnClickListener {
            val i = Intent(this, SummaryActivity::class.java).apply {
                putExtra(EXTRA_GATEWAY, gateway)
                putExtra(EXTRA_BED, bed)
                putExtra(EXTRA_LOCATION, loc)
                img?.let { putExtra(EXTRA_IMAGE_URI, it.toString()) }
            }
            startActivity(i)
        }
    }
}





