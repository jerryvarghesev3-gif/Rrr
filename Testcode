package com.connect.connection

import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.widget.Button
import android.widget.ImageView
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import org.eclipse.paho.client.mqttv3.IMqttActionListener
import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken
import org.eclipse.paho.client.mqttv3.MqttCallbackExtended
import org.eclipse.paho.client.mqttv3.MqttMessage
import org.json.JSONObject

class SummaryBActivity : AppCompatActivity() {

    // --- view refs (must exist in activity_summary_b.xml) ---
    private lateinit var txtGateway: TextView
    private lateinit var txtBed: TextView
    private lateinit var txtLocation: TextView
    private lateinit var txtInfo: TextView
    private lateinit var imgPreview: ImageView
    private lateinit var btnBack: Button
    private lateinit var btnNext: Button

    // --- data from A/SummaryA ---
    private var gatewayId = ""
    private var bedId = ""
    private var locationId = ""
    private var imageUri: Uri? = null

    // we keep what we subscribed to so we can unsubscribe onDestroy
    private var responseTopic: String? = null

    companion object {
        const val EXTRA_GATEWAY   = "gatewayId"
        const val EXTRA_BED       = "bedId"
        const val EXTRA_LOCATION  = "locationId"
        const val EXTRA_IMAGE_URI = "imageUri"
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_summary_b)

        // bind
        txtGateway  = findViewById(R.id.txtGatewayB)
        txtBed      = findViewById(R.id.txtBedB)
        txtLocation = findViewById(R.id.txtLocationB)
        txtInfo     = findViewById(R.id.txtInfoB)
        imgPreview  = findViewById(R.id.imgPreviewB)
        btnBack     = findViewById(R.id.btnBackB)
        btnNext     = findViewById(R.id.btnNextB)

        // extras
        gatewayId = intent.getStringExtra(EXTRA_GATEWAY).orEmpty()
        bedId     = intent.getStringExtra(EXTRA_BED).orEmpty()
        locationId= intent.getStringExtra(EXTRA_LOCATION).orEmpty()
        intent.getStringExtra(EXTRA_IMAGE_URI)?.let { imageUri = Uri.parse(it) }

        // show
        txtGateway.text  = "Gateway: $gatewayId"
        txtBed.text      = "Bed ID: $bedId"
        txtLocation.text = "Location ID: $locationId"
        imageUri?.let { imgPreview.setImageURI(it) }

        btnBack.setOnClickListener { finish() }

        btnNext.setOnClickListener {
            if (gatewayId.isEmpty() || bedId.isEmpty() || locationId.isEmpty()) {
                Toast.makeText(this, "Missing IDs", Toast.LENGTH_SHORT).show()
                return@setOnClickListener
            }
            txtInfo.text = "Setting location…"
            btnNext.isEnabled = false
            setLocationOverMqtt()
        }
    }

    // ---- MQTT helper: publish request and wait for reply ----
    private fun setLocationOverMqtt(force: Boolean = false) {
        val c = MqttHolder.client
        if (c == null) {
            txtInfo.text = "MQTT not connected"
            btnNext.isEnabled = true
            return
        }

        // 1) subscribe to the response topic (idempotent on most brokers)
        val resp = topicSetLocationResp(bedId)
        responseTopic = resp

        c.subscribe(resp, 1, null, object : IMqttActionListener {
            override fun onSuccess(asyncActionToken: org.eclipse.paho.client.mqttv3.IMqttToken?) {
                // 2) install a callback that filters by topic and forwards to handler
                c.setCallback(object : MqttCallbackExtended {
                    override fun connectComplete(reconnect: Boolean, serverURI: String?) {}
                    override fun connectionLost(cause: Throwable?) {}

                    override fun messageArrived(topic: String?, message: MqttMessage?) {
                        if (topic == resp) {
                            val payload = message?.toString().orEmpty()
                            runOnUiThread { handleSetLocationResponse(payload) }
                        }
                    }

                    override fun deliveryComplete(token: IMqttDeliveryToken?) {}
                })

                // 3) after we’re listening, publish the request
                publishSetLocation(force)
            }

            override fun onFailure(
                asyncActionToken: org.eclipse.paho.client.mqttv3.IMqttToken?,
                exception: Throwable?
            ) {
                txtInfo.text = "Subscribe failed: ${exception?.message}"
                btnNext.isEnabled = true
            }
        })
    }

    private fun publishSetLocation(force: Boolean) {
        val c = MqttHolder.client ?: run {
            txtInfo.text = "MQTT not connected"
            btnNext.isEnabled = true
            return
        }

        val reqTopic = topicSetLocationReq(gatewayId)

        val data = JSONObject().apply {
            put("bedId", bedId)
            put("locationId", locationId)
            put("force", force)
        }
        val req = JSONObject().apply {
            put("command", "set_location")
            put("data", data)
        }
        val payload = req.toString().toByteArray(Charsets.UTF_8)

        c.publish(reqTopic, payload, 1, /*retained*/false, /*userContext*/null,
            object : IMqttActionListener {
                override fun onSuccess(asyncActionToken: org.eclipse.paho.client.mqttv3.IMqttToken?) {
                    // waiting for response…
                    txtInfo.text = "Waiting for response…"
                }

                override fun onFailure(
                    asyncActionToken: org.eclipse.paho.client.mqttv3.IMqttToken?,
                    exception: Throwable?
                ) {
                    txtInfo.text = "Publish failed: ${exception.message}"
                    btnNext.isEnabled = true
                }
            }
        )
    }

    // Parse JSON and go to final SummaryActivity
    private fun handleSetLocationResponse(json: String) {
        try {
            val root = JSONObject(json)
            val status = root.optInt("status", -1)
            val locFromResp = root.optJSONObject("data")
                ?.optString("locationId")
                ?.takeIf { it.isNotBlank() }
            val finalLoc = locFromResp ?: locationId

            val i = Intent(this, SummaryActivity::class.java).apply {
                putExtra("gatewayId", gatewayId)
                putExtra("bedId", bedId)
                putExtra("locationId", finalLoc)
                putExtra("status", status)
                addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_SINGLE_TOP)
            }
            startActivity(i)
            finish()
        } catch (t: Throwable) {
            txtInfo.text = "Response parse error: ${t.message}"
            btnNext.isEnabled = true
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        // best-effort cleanup: unsubscribe and replace callback with a no-op
        try {
            responseTopic?.let { topic ->
                MqttHolder.client?.unsubscribe(topic)
            }
            MqttHolder.client?.setCallback(object : MqttCallbackExtended {
                override fun connectComplete(reconnect: Boolean, serverURI: String?) {}
                override fun connectionLost(cause: Throwable?) {}
                override fun messageArrived(topic: String?, message: MqttMessage?) {}
                override fun deliveryComplete(token: IMqttDeliveryToken?) {}
            })
        } catch (_: Exception) { /* ignore */ }
    }

    // ---- topic helpers (rename to match your broker, if needed) ----
    private fun topicSetLocationReq(gw: String)  = "gw/$gw/req/set_location"
    private fun topicSetLocationResp(bed: String) = "bed/$bed/resp/set_location"
}





package com.connect.connection

import android.content.Intent
import android.os.Bundle
import android.widget.Button
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity

class SummaryActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_summary)

        val status     = intent.getIntExtra("status", -1)
        val gatewayId  = intent.getStringExtra("gatewayId") ?: ""
        val bedId      = intent.getStringExtra("bedId") ?: ""
        val locationId = intent.getStringExtra("locationId") ?: ""

        val txt = findViewById<TextView>(R.id.summaryText)
        val btn = findViewById<Button>(R.id.btnDone)

        // Safety in case XML IDs don't match
        if (txt == null || btn == null) {
            finish()
            return
        }

        txt.text = buildString {
            appendLine(if (status == 0) "✅  Location set OK" else "❌  set_location failed (status=$status)")
            appendLine("Gateway: $gatewayId")
            appendLine("Bed ID: $bedId")
            appendLine("Location ID: $locationId")
        }

        btn.setOnClickListener {
            startActivity(Intent(this, MainActivity::class.java).apply {
                addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_SINGLE_TOP)
            })
            finish()
        }
    }
}



