package com.connect.connection

import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.camera.core.*
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import com.google.mlkit.vision.barcode.BarcodeScanning
import com.google.mlkit.vision.barcode.common.Barcode
import com.google.mlkit.vision.common.InputImage
import java.io.File
import java.util.concurrent.Executors

class QRActivity : AppCompatActivity() {

    companion object {
        const val EXTRA_GATEWAY = "gatewayId"
        const val EXTRA_BED = "bedId"
        const val EXTRA_IMAGE_URI = "imageUri"
    }

    private lateinit var previewView: PreviewView
    private val cameraExecutor = Executors.newSingleThreadExecutor()
    private var imageCapture: ImageCapture? = null
    private var decodedOnce = false

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_qra)
        previewView = findViewById(R.id.previewViewA)
        startCamera()
    }

    private fun startCamera() {
        val providerFuture = ProcessCameraProvider.getInstance(this)
        providerFuture.addListener({
            val provider = providerFuture.get()

            val preview = Preview.Builder().build().also {
                it.setSurfaceProvider(previewView.surfaceProvider)
            }

            imageCapture = ImageCapture.Builder()
                .setCaptureMode(ImageCapture.CAPTURE_MODE_MINIMIZE_LATENCY)
                .build()

            val analysis = ImageAnalysis.Builder().build()
            analysis.setAnalyzer(cameraExecutor) { proxy -> analyze(proxy) }

            provider.unbindAll()
            provider.bindToLifecycle(
                this,
                CameraSelector.DEFAULT_BACK_CAMERA,
                preview,
                imageCapture,
                analysis
            )
        }, mainExecutor)
    }

    private fun analyze(imageProxy: ImageProxy) {
        if (decodedOnce) { imageProxy.close(); return }

        val media = imageProxy.image ?: run { imageProxy.close(); return }
        val input = InputImage.fromMediaImage(media, imageProxy.imageInfo.rotationDegrees)

        BarcodeScanning.getClient().process(input)
            .addOnSuccessListener { codes ->
                val raw = codes.firstOrNull { it.valueType == Barcode.TYPE_TEXT }?.rawValue
                if (!raw.isNullOrBlank() && !decodedOnce) {
                    decodedOnce = true
                    takePhoto { uri -> goToSummaryA(raw, uri) }
                }
            }
            .addOnFailureListener { Toast.makeText(this, "Scan failed", Toast.LENGTH_SHORT).show() }
            .addOnCompleteListener { imageProxy.close() }
    }

    private fun takePhoto(onSaved: (Uri?) -> Unit) {
        val cap = imageCapture ?: return onSaved(null)
        val file = File(cacheDir, "qra_${System.currentTimeMillis()}.jpg")
        val out = ImageCapture.OutputFileOptions.Builder(file).build()
        cap.takePicture(out, mainExecutor, object : ImageCapture.OnImageSavedCallback {
            override fun onImageSaved(result: ImageCapture.OutputFileResults) {
                onSaved(result.savedUri ?: Uri.fromFile(file))
            }
            override fun onError(exc: ImageCaptureException) { onSaved(null) }
        })
    }

    private fun goToSummaryA(raw: String, photo: Uri?) {
        // If your encoding is different, adjust parsing:
        val parts = raw.split("-", " ", ",")
        val gatewayId = parts.getOrNull(0) ?: raw
        val bedId = parts.getOrNull(1) ?: ""

        val i = Intent(this, SummaryAActivity::class.java).apply {
            putExtra(EXTRA_GATEWAY, gatewayId)
            putExtra(EXTRA_BED, bedId)
            photo?.let { putExtra(EXTRA_IMAGE_URI, it.toString()) }
        }
        startActivity(i)
        finish()
    }
}








package com.connect.connection

import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.widget.Button
import android.widget.ImageView
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity

class SummaryAActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_summary_a)

        val gatewayId = intent.getStringExtra(QRActivity.EXTRA_GATEWAY) ?: ""
        val bedId     = intent.getStringExtra(QRActivity.EXTRA_BED) ?: ""
        val imgUri    = intent.getStringExtra(QRActivity.EXTRA_IMAGE_URI)?.let { Uri.parse(it) }

        findViewById<TextView>(R.id.txtGatewayA).text = "Gateway: $gatewayId"
        findViewById<TextView>(R.id.txtBedA).text     = "Bed ID: $bedId"
        imgUri?.let { findViewById<ImageView>(R.id.imgPreviewA).setImageURI(it) }

        findViewById<Button>(R.id.btnRescanA).setOnClickListener {
            startActivity(Intent(this, QRActivity::class.java))
            finish()
        }
        findViewById<Button>(R.id.btnContinueA).setOnClickListener {
            val i = Intent(this, QRBActivity::class.java).apply {
                putExtra(QRActivity.EXTRA_GATEWAY, gatewayId)
                putExtra(QRActivity.EXTRA_BED, bedId)
                imgUri?.let { putExtra(QRActivity.EXTRA_IMAGE_URI, it.toString()) }
            }
            startActivity(i)
            finish()
        }
    }
}








package com.connect.connection

import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.camera.core.*
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import com.google.mlkit.vision.barcode.BarcodeScanning
import com.google.mlkit.vision.barcode.common.Barcode
import com.google.mlkit.vision.common.InputImage
import java.io.File
import java.util.concurrent.Executors

class QRBActivity : AppCompatActivity() {

    private lateinit var previewView: PreviewView
    private val cameraExecutor = Executors.newSingleThreadExecutor()
    private var imageCapture: ImageCapture? = null
    private var decodedOnce = false

    private var gatewayId = ""
    private var bedId = ""
    private var photoA: Uri? = null   // optional, from A if you want to carry it along

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_qrb)

        previewView = findViewById(R.id.previewViewB)
        gatewayId = intent.getStringExtra(QRActivity.EXTRA_GATEWAY) ?: ""
        bedId     = intent.getStringExtra(QRActivity.EXTRA_BED) ?: ""
        photoA    = intent.getStringExtra(QRActivity.EXTRA_IMAGE_URI)?.let { Uri.parse(it) }

        startCamera()
    }

    private fun startCamera() {
        val providerFuture = ProcessCameraProvider.getInstance(this)
        providerFuture.addListener({
            val provider = providerFuture.get()

            val preview = Preview.Builder().build().also {
                it.setSurfaceProvider(previewView.surfaceProvider)
            }

            imageCapture = ImageCapture.Builder()
                .setCaptureMode(ImageCapture.CAPTURE_MODE_MINIMIZE_LATENCY)
                .build()

            val analysis = ImageAnalysis.Builder().build()
            analysis.setAnalyzer(cameraExecutor) { proxy -> analyze(proxy) }

            provider.unbindAll()
            provider.bindToLifecycle(
                this,
                CameraSelector.DEFAULT_BACK_CAMERA,
                preview,
                imageCapture,
                analysis
            )
        }, mainExecutor)
    }

    private fun analyze(imageProxy: ImageProxy) {
        if (decodedOnce) { imageProxy.close(); return }

        val media = imageProxy.image ?: run { imageProxy.close(); return }
        val input = InputImage.fromMediaImage(media, imageProxy.imageInfo.rotationDegrees)

        BarcodeScanning.getClient().process(input)
            .addOnSuccessListener { codes ->
                val raw = codes.firstOrNull { it.valueType == Barcode.TYPE_TEXT }?.rawValue
                if (!raw.isNullOrBlank() && !decodedOnce) {
                    decodedOnce = true
                    takePhoto { uri -> goToSummaryB(raw, uri) }
                }
            }
            .addOnFailureListener { Toast.makeText(this, "Scan failed", Toast.LENGTH_SHORT).show() }
            .addOnCompleteListener { imageProxy.close() }
    }

    private fun takePhoto(onSaved: (Uri?) -> Unit) {
        val cap = imageCapture ?: return onSaved(null)
        val file = File(cacheDir, "qrb_${System.currentTimeMillis()}.jpg")
        val out = ImageCapture.OutputFileOptions.Builder(file).build()
        cap.takePicture(out, mainExecutor, object : ImageCapture.OnImageSavedCallback {
            override fun onImageSaved(result: ImageCapture.OutputFileResults) {
                onSaved(result.savedUri ?: Uri.fromFile(file))
            }
            override fun onError(exc: ImageCaptureException) { onSaved(null) }
        })
    }

    private fun goToSummaryB(locationRaw: String, photoB: Uri?) {
        val i = Intent(this, SummaryBActivity::class.java).apply {
            putExtra(QRActivity.EXTRA_GATEWAY, gatewayId)
            putExtra(QRActivity.EXTRA_BED, bedId)
            putExtra(SummaryBActivity.EXTRA_LOCATION, locationRaw)
            photoB?.let { putExtra(QRActivity.EXTRA_IMAGE_URI, it.toString()) }
        }
        startActivity(i)
        finish()
    }
}






package com.connect.connection

import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.view.View
import android.widget.*
import androidx.appcompat.app.AppCompatActivity
import info.mqtt.android.service.MqttAndroidClient
import org.eclipse.paho.client.mqttv3.*
import org.json.JSONObject

class SummaryBActivity : AppCompatActivity() {

    private lateinit var txtGateway: TextView
    private lateinit var txtBed: TextView
    private lateinit var txtLocation: TextView
    private lateinit var txtInfo: TextView
    private lateinit var img: ImageView
    private lateinit var btnRescan: Button
    private lateinit var btnContinue: Button
    private lateinit var progress: ProgressBar

    private var gatewayId = ""
    private var bedId = ""
    private var locationId = ""
    private var imageUri: Uri? = null

    // existing global connected client
    private val mqttClient: MqttAndroidClient? get() = MqttHolder.client
    private var responseTopic: String? = null

    private val NO_OP = object : MqttCallbackExtended {
        override fun connectComplete(reconnect: Boolean, serverURI: String?) {}
        override fun connectionLost(cause: Throwable?) {}
        override fun messageArrived(topic: String?, message: MqttMessage?) {}
        override fun deliveryComplete(token: IMqttDeliveryToken?) {}
    }

    companion object {
        const val EXTRA_LOCATION = "locationId"
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_summary_b)

        txtGateway = findViewById(R.id.txtGatewayB)
        txtBed = findViewById(R.id.txtBedB)
        txtLocation = findViewById(R.id.txtLocationB)
        txtInfo = findViewById(R.id.txtInfoB)
        img = findViewById(R.id.imgPreviewB)
        btnRescan = findViewById(R.id.btnRescanB)
        btnContinue = findViewById(R.id.btnContinueB)
        progress = findViewById(R.id.progressB)

        gatewayId = intent.getStringExtra(QRActivity.EXTRA_GATEWAY) ?: ""
        bedId = intent.getStringExtra(QRActivity.EXTRA_BED) ?: ""
        locationId = intent.getStringExtra(EXTRA_LOCATION) ?: intent.getStringExtra("locationId") ?: ""
        intent.getStringExtra(QRActivity.EXTRA_IMAGE_URI)?.let { imageUri = Uri.parse(it) }

        txtGateway.text = "Gateway: $gatewayId"
        txtBed.text = "Bed ID: $bedId"
        txtLocation.text = "Location ID: $locationId"
        imageUri?.let { img.setImageURI(it) }

        btnRescan.setOnClickListener {
            val i = Intent(this, QRBActivity::class.java).apply {
                putExtra(QRActivity.EXTRA_GATEWAY, gatewayId)
                putExtra(QRActivity.EXTRA_BED, bedId)
            }
            startActivity(i)
            finish()
        }
        btnContinue.setOnClickListener {
            if (gatewayId.isEmpty() || bedId.isEmpty() || locationId.isEmpty()) {
                Toast.makeText(this, "Missing IDs", Toast.LENGTH_SHORT).show()
                return@setOnClickListener
            }
            setLocation(false)
        }
    }

    private fun setBusy(busy: Boolean, msg: String) {
        progress.visibility = if (busy) View.VISIBLE else View.GONE
        txtInfo.text = msg
        btnRescan.isEnabled = !busy
        btnContinue.isEnabled = !busy
    }

    private fun reqTopicFor(gw: String) = "gw/$gw/req/set_location"
    private fun respTopicFor(bed: String) = "bed/$bed/resp/set_location"

    private fun setLocation(force: Boolean) {
        val client = mqttClient
        if (client == null || !client.isConnected) {
            setBusy(false, "MQTT not connected")
            return
        }

        val resp = respTopicFor(bedId).also { responseTopic = it }
        setBusy(true, "Setting location…")

        client.subscribe(resp, 1, null, object : IMqttActionListener {
            override fun onSuccess(asyncActionToken: IMqttToken?) {
                client.setCallback(object : MqttCallbackExtended {
                    override fun connectComplete(reconnect: Boolean, serverURI: String?) {}
                    override fun connectionLost(cause: Throwable?) {
                        runOnUiThread { setBusy(false, "MQTT lost") }
                    }
                    override fun messageArrived(topic: String?, message: MqttMessage?) {
                        if (topic == resp) {
                            runOnUiThread { handleSetLocationResponse(message?.toString().orEmpty()) }
                        }
                    }
                    override fun deliveryComplete(token: IMqttDeliveryToken?) {}
                })
                publishSetLocation(force)
            }
            override fun onFailure(asyncActionToken: IMqttToken?, exception: Throwable?) {
                setBusy(false, "Subscribe failed: ${exception?.message}")
            }
        })
    }

    private fun publishSetLocation(force: Boolean) {
        val client = mqttClient ?: return
        val reqTopic = reqTopicFor(gatewayId)

        val data = JSONObject().apply {
            put("bedId", bedId)
            put("locationId", locationId)
            put("force", force)
        }
        val req = JSONObject().apply {
            put("command", "set_location")
            put("data", data)
        }
        val payload = req.toString().toByteArray(Charsets.UTF_8)

        client.publish(reqTopic, payload, 1, false, null, object : IMqttActionListener {
            override fun onSuccess(asyncActionToken: IMqttToken?) {
                runOnUiThread { txtInfo.text = "Waiting for response…" }
            }
            override fun onFailure(asyncActionToken: IMqttToken?, exception: Throwable?) {
                setBusy(false, "Publish failed: ${exception?.message}")
            }
        })
    }

    private fun handleSetLocationResponse(json: String) {
        val status = try { JSONObject(json).optInt("status", -1) } catch (_: Exception) { -1 }

        val i = Intent(this, SummaryActivity::class.java).apply {
            putExtra("gatewayId", gatewayId)
            putExtra("bedId", bedId)
            putExtra("locationId", locationId)
            putExtra("status", status)
            addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_SINGLE_TOP)
        }
        startActivity(i)
        finish()
    }

    override fun onDestroy() {
        super.onDestroy()
        try {
            val c = mqttClient
            responseTopic?.let { c?.unsubscribe(it) }
            c?.setCallback(NO_OP) // don’t pass null
        } catch (_: Exception) { }
    }
}







package com.connect.connection

import android.os.Bundle
import android.widget.Button
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity

class SummaryActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_summary)

        val status = intent.getIntExtra("status", -1)
        val gatewayId = intent.getStringExtra("gatewayId") ?: ""
        val bedId = intent.getStringExtra("bedId") ?: ""
        val locationId = intent.getStringExtra("locationId") ?: ""

        findViewById<TextView>(R.id.summaryText).text = buildString {
            appendLine(if (status == 0) "✅ Location set OK" else "❌ set_location failed (status=$status)")
            appendLine("Gateway: $gatewayId")
            appendLine("Bed ID: $bedId")
            appendLine("Location ID: $locationId")
        }

        findViewById<Button>(R.id.btnClose).setOnClickListener {
            finishAffinity()
        }
    }
}







<?xml version="1.0" encoding="utf-8"?>
<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <androidx.camera.view.PreviewView
        android:id="@+id/previewViewA"
        android:layout_width="match_parent"
        android:layout_height="match_parent" />
</FrameLayout>






<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:background="#101010"
    android:orientation="vertical"
    android:padding="16dp"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <ImageView
        android:id="@+id/imgPreviewA"
        android:layout_width="match_parent"
        android:layout_height="180dp"
        android:scaleType="centerCrop"
        android:contentDescription="photo" />

    <TextView
        android:id="@+id/txtGatewayA"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Gateway:"
        android:textColor="#FFFFFF"
        android:textSize="16sp"
        android:paddingTop="12dp" />

    <TextView
        android:id="@+id/txtBedA"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Bed ID:"
        android:textColor="#FFFFFF"
        android:textSize="16sp"
        android:paddingTop="4dp" />

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:gravity="center"
        android:layout_marginTop="24dp">

        <Button
            android:id="@+id/btnRescanA"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="RESCAN" />

        <View
            android:layout_width="12dp"
            android:layout_height="1dp" />

        <Button
            android:id="@+id/btnContinueA"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="CONTINUE" />
    </LinearLayout>
</LinearLayout>






<?xml version="1.0" encoding="utf-8"?>
<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <androidx.camera.view.PreviewView
        android:id="@+id/previewViewB"
        android:layout_width="match_parent"
        android:layout_height="match_parent" />
</FrameLayout>




<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/rootB"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp"
    android:background="#101010">

    <ImageView
        android:id="@+id/imgPreviewB"
        android:layout_width="match_parent"
        android:layout_height="180dp"
        android:scaleType="centerCrop"
        android:contentDescription="photo" />

    <TextView
        android:id="@+id/txtGatewayB"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Gateway:"
        android:textColor="#FFFFFF"
        android:textSize="16sp"
        android:paddingTop="12dp" />

    <TextView
        android:id="@+id/txtBedB"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Bed ID:"
        android:textColor="#FFFFFF"
        android:textSize="16sp"
        android:paddingTop="4dp" />

    <TextView
        android:id="@+id/txtLocationB"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Location ID:"
        android:textColor="#FFFFFF"
        android:textSize="16sp"
        android:paddingTop="4dp" />

    <TextView
        android:id="@+id/txtInfoB"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text=""
        android:textColor="#B0FFFFFF"
        android:textSize="14sp"
        android:paddingTop="8dp" />

    <ProgressBar
        android:id="@+id/progressB"
        style="?android:attr/progressBarStyleLarge"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="8dp"
        android:visibility="gone" />

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:gravity="center"
        android:layout_marginTop="24dp">

        <Button
            android:id="@+id/btnRescanB"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="RESCAN" />

        <View
            android:layout_width="12dp"
            android:layout_height="1dp" />

        <Button
            android:id="@+id/btnContinueB"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="CONTINUE" />
    </LinearLayout>
</LinearLayout>






<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/rootSummary"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="#101010"
    android:orientation="vertical"
    android:padding="16dp">

    <TextView
        android:id="@+id/summaryText"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_weight="1"
        android:textColor="#FFFFFF"
        android:textSize="18sp" />

    <Button
        android:id="@+id/btnClose"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="CLOSE" />
</LinearLayout>













