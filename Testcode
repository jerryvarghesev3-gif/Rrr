package com.connect.connection

import android.Manifest
import android.content.Intent
import android.content.pm.PackageManager
import android.os.Bundle
import android.util.Log
import android.view.Surface
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import androidx.camera.core.*
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import androidx.core.content.ContextCompat
import com.google.mlkit.vision.barcode.BarcodeScanning
import com.google.mlkit.vision.barcode.BarcodeScannerOptions
import com.google.mlkit.vision.common.InputImage
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors
import java.util.concurrent.atomic.AtomicBoolean

class QRBActivity : AppCompatActivity() {

    companion object {
        const val EXTRA_BED = "bedId"
        const val EXTRA_IMAGE_URI = "imageUri"
        const val EXTRA_LOCATION = "locationId"
        private const val TAG = "QRB"
    }

    private lateinit var previewView: PreviewView
    private lateinit var cameraExecutor: ExecutorService
    private var imageAnalysis: ImageAnalysis? = null
    private val analyzing = AtomicBoolean(false)

    private val requestCameraPerm =
        registerForActivityResult(ActivityResultContracts.RequestPermission()) { granted ->
            if (granted) startCamera() else finish()
        }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_qrb)

        previewView = findViewById(R.id.previewViewB)
        cameraExecutor = Executors.newSingleThreadExecutor()

        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA)
            == PackageManager.PERMISSION_GRANTED
        ) {
            startCamera()
        } else {
            requestCameraPerm.launch(Manifest.permission.CAMERA)
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        try { imageAnalysis?.clearAnalyzer() } catch (_: Exception) {}
        try { cameraExecutor.shutdown() } catch (_: Exception) {}
    }

    private fun startCamera() {
        val providerFuture = ProcessCameraProvider.getInstance(this)
        providerFuture.addListener({
            val provider = providerFuture.get()

            val preview = Preview.Builder()
                .setTargetRotation(previewView.display?.rotation ?: Surface.ROTATION_0)
                .build()
                .also { it.setSurfaceProvider(previewView.surfaceProvider) }

            imageAnalysis = ImageAnalysis.Builder()
                .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)
                .setTargetRotation(previewView.display?.rotation ?: Surface.ROTATION_0)
                .build()

            val options = BarcodeScannerOptions.Builder()
                .setBarcodeFormats(com.google.mlkit.vision.barcode.common.Barcode.FORMAT_QR_CODE)
                .build()
            val scanner = BarcodeScanning.getClient(options)

            analyzing.set(true)
            imageAnalysis?.setAnalyzer(cameraExecutor) { imageProxy ->
                try {
                    val media = imageProxy.image ?: run { imageProxy.close(); return@setAnalyzer }
                    val img = InputImage.fromMediaImage(
                        media, imageProxy.imageInfo.rotationDegrees
                    )
                    scanner.process(img)
                        .addOnSuccessListener { codes ->
                            val value = codes.firstOrNull()?.rawValue
                            if (!value.isNullOrBlank() && analyzing.compareAndSet(true, false)) {
                                imageProxy.close()
                                openSummaryB(value.trim())
                                return@addOnSuccessListener
                            }
                        }
                        .addOnFailureListener { e ->
                            Log.e(TAG, "Scan fail", e)
                        }
                        .addOnCompleteListener { imageProxy.close() }
                } catch (t: Throwable) {
                    Log.e(TAG, "Analyzer crash", t)
                    imageProxy.close()
                }
            }

            val selector = CameraSelector.DEFAULT_BACK_CAMERA
            provider.unbindAll()
            provider.bindToLifecycle(this, selector, preview, imageAnalysis)
        }, ContextCompat.getMainExecutor(this))
    }

    private fun openSummaryB(locationId: String) {
        val i = Intent(this, SummaryBActivity::class.java).apply {
            putExtra(EXTRA_LOCATION, locationId)
            intent.getStringExtra(EXTRA_BED)?.let { putExtra(EXTRA_BED, it) }
            intent.getStringExtra(EXTRA_IMAGE_URI)?.let { putExtra(EXTRA_IMAGE_URI, it) }
        }
        startActivity(i)
        finish() // we came here only to scan
    }
}







package com.connect.connection

import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.widget.Button
import android.widget.ImageView
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity

class SummaryBActivity : AppCompatActivity() {

    private lateinit var txtBed: TextView
    private lateinit var txtLocation: TextView
    private lateinit var imgPreview: ImageView
    private lateinit var btnRescan: Button
    private lateinit var btnContinue: Button
    private lateinit var btnCancel: Button

    private var bedId: String = ""
    private var locationId: String = ""
    private var imageUri: Uri? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_summary_b)

        // Views
        txtBed = findViewById(R.id.txtBedB)
        txtLocation = findViewById(R.id.txtLocationB)
        imgPreview = findViewById(R.id.imgPreviewB)
        btnRescan = findViewById(R.id.btnRescanB)
        btnContinue = findViewById(R.id.btnContinueB)
        btnCancel = findViewById(R.id.btnCancelB)

        // Extras
        bedId = intent.getStringExtra(QRBActivity.EXTRA_BED).orEmpty()
        locationId = intent.getStringExtra(QRBActivity.EXTRA_LOCATION).orEmpty()
        intent.getStringExtra(QRBActivity.EXTRA_IMAGE_URI)?.let { imageUri = Uri.parse(it) }

        // Show
        txtBed.text = "Bed ID: $bedId"
        txtLocation.text = "Location ID: $locationId"
        imageUri?.let { imgPreview.setImageURI(it) }

        // Rescan -> open B scanner again
        btnRescan.setOnClickListener {
            val i = Intent(this, QRBActivity::class.java).apply {
                putExtra(QRBActivity.EXTRA_BED, bedId)
                imageUri?.let { putExtra(QRBActivity.EXTRA_IMAGE_URI, it.toString()) }
            }
            startActivity(i)
            finish()
        }

        // Continue -> go to your final SummaryActivity
        btnContinue.setOnClickListener {
            val i = Intent(this, SummaryActivity::class.java).apply {
                putExtra("bedId", bedId)
                putExtra("locationId", locationId)
                imageUri?.let { putExtra("imageUri", it.toString()) }
                // if your SummaryActivity expects "status", add it there after you wire MQTT
            }
            startActivity(i)
            // do not finish if you want the user to be able to back-nav
            // finish()  // uncomment if you want to close this screen
        }

        // Cancel -> just close this page
        btnCancel.setOnClickListener { finish() }
    }
}







<?xml version="1.0" encoding="utf-8"?>
<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="#000000">

    <androidx.camera.view.PreviewView
        android:id="@+id/previewViewB"
        android:layout_width="match_parent"
        android:layout_height="match_parent" />

    <!-- optional hint -->
    <TextView
        android:id="@+id/txtHintB"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Scan Location QR"
        android:textColor="#FFFFFF"
        android:textSize="18sp"
        android:layout_gravity="center" />
</FrameLayout>






<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:orientation="vertical"
    android:padding="16dp"
    android:gravity="center_horizontal"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <ImageView
        android:id="@+id/imgPreviewB"
        android:layout_width="220dp"
        android:layout_height="140dp"
        android:scaleType="centerCrop"
        android:background="#EEE" />

    <TextView
        android:id="@+id/txtBedB"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Bed ID:"
        android:textSize="16sp"
        android:layout_marginTop="16dp" />

    <TextView
        android:id="@+id/txtLocationB"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Location ID:"
        android:textSize="16sp"
        android:layout_marginTop="8dp" />

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:layout_marginTop="28dp">

        <Button
            android:id="@+id/btnRescanB"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="RESCAN" />

        <Button
            android:id="@+id/btnContinueB"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="12dp"
            android:text="CONTINUE" />

        <Button
            android:id="@+id/btnCancelB"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="12dp"
            android:text="CANCEL" />
    </LinearLayout>
</LinearLayout>






class QRBActivity : AppCompatActivity() {

    companion object {
        const val EXTRA_BED = "bedId"
        const val EXTRA_IMAGE_URI = "imageUri"
        const val EXTRA_LOCATION = "locationId"
        private const val TAG = "QRB"
    }

    private lateinit var previewView: PreviewView
    private lateinit var cameraExecutor: ExecutorService
    private var imageAnalysis: ImageAnalysis? = null
    private var imageCapture: ImageCapture? = null
    private val analyzing = AtomicBoolean(false)

    private val requestCameraPerm =
        registerForActivityResult(ActivityResultContracts.RequestPermission()) { granted ->
            if (granted) startCamera() else finish()
        }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_qrb)

        previewView = findViewById(R.id.previewViewB)
        cameraExecutor = Executors.newSingleThreadExecutor()

        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA)
            == PackageManager.PERMISSION_GRANTED
        ) {
            startCamera()
        } else {
            requestCameraPerm.launch(Manifest.permission.CAMERA)
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        try { imageAnalysis?.clearAnalyzer() } catch (_: Exception) {}
        try { cameraExecutor.shutdown() } catch (_: Exception) {}
    }

    private fun startCamera() {
        val providerFuture = ProcessCameraProvider.getInstance(this)
        providerFuture.addListener({
            val provider = providerFuture.get()

            val preview = Preview.Builder()
                .setTargetRotation(previewView.display?.rotation ?: Surface.ROTATION_0)
                .build()
                .also { it.setSurfaceProvider(previewView.surfaceProvider) }

            imageCapture = ImageCapture.Builder()
                .setTargetRotation(previewView.display?.rotation ?: Surface.ROTATION_0)
                .build()

            imageAnalysis = ImageAnalysis.Builder()
                .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)
                .setTargetRotation(previewView.display?.rotation ?: Surface.ROTATION_0)
                .build()

            val scanner = BarcodeScanning.getClient(
                BarcodeScannerOptions.Builder()
                    .setBarcodeFormats(com.google.mlkit.vision.barcode.common.Barcode.FORMAT_QR_CODE)
                    .build()
            )

            analyzing.set(true)
            imageAnalysis?.setAnalyzer(cameraExecutor) { imageProxy ->
                try {
                    val media = imageProxy.image ?: run { imageProxy.close(); return@setAnalyzer }
                    val img = InputImage.fromMediaImage(
                        media, imageProxy.imageInfo.rotationDegrees
                    )
                    scanner.process(img)
                        .addOnSuccessListener { codes ->
                            val value = codes.firstOrNull()?.rawValue
                            if (!value.isNullOrBlank() && analyzing.compareAndSet(true, false)) {
                                imageProxy.close()
                                takePictureAndOpenSummary(value.trim())
                                return@addOnSuccessListener
                            }
                        }
                        .addOnFailureListener { e ->
                            Log.e(TAG, "Scan fail", e)
                        }
                        .addOnCompleteListener { imageProxy.close() }
                } catch (t: Throwable) {
                    Log.e(TAG, "Analyzer crash", t)
                    imageProxy.close()
                }
            }

            val selector = CameraSelector.DEFAULT_BACK_CAMERA
            provider.unbindAll()
            provider.bindToLifecycle(this, selector, preview, imageCapture, imageAnalysis)
        }, ContextCompat.getMainExecutor(this))
    }

    private fun takePictureAndOpenSummary(locationId: String) {
        val imageCapture = imageCapture ?: return

        val file = File(cacheDir, "qr_${System.currentTimeMillis()}.jpg")
        val output = ImageCapture.OutputFileOptions.Builder(file).build()

        imageCapture.takePicture(output, ContextCompat.getMainExecutor(this),
            object : ImageCapture.OnImageSavedCallback {
                override fun onImageSaved(result: ImageCapture.OutputFileResults) {
                    val uri = Uri.fromFile(file)
                    openSummaryB(locationId, uri)
                }
                override fun onError(exc: ImageCaptureException) {
                    Log.e(TAG, "Image capture failed", exc)
                    openSummaryB(locationId, null) // fallback
                }
            })
    }

    private fun openSummaryB(locationId: String, photoUri: Uri?) {
        val i = Intent(this, SummaryBActivity::class.java).apply {
            putExtra(EXTRA_LOCATION, locationId)
            intent.getStringExtra(EXTRA_BED)?.let { putExtra(EXTRA_BED, it) }
            photoUri?.let { putExtra(EXTRA_IMAGE_URI, it.toString()) }
        }
        startActivity(i)
        finish()
    }
}





package com.connect.connection

import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.widget.Button
import android.widget.ImageView
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity

class SummaryBActivity : AppCompatActivity() {

    private lateinit var txtBed: TextView
    private lateinit var txtLocation: TextView
    private lateinit var imgPreview: ImageView
    private lateinit var btnRescan: Button
    private lateinit var btnContinue: Button
    private lateinit var btnCancel: Button

    private var bedId: String = ""
    private var locationId: String = ""
    private var imageUri: Uri? = null   // parsed from String extra if present

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_summary_b)

        // Bind views (make sure your XML has these exact IDs)
        txtBed      = findViewById(R.id.txtBedB)
        txtLocation = findViewById(R.id.txtLocationB)
        imgPreview  = findViewById(R.id.imgPreviewB)
        btnRescan   = findViewById(R.id.btnRescanB)
        btnContinue = findViewById(R.id.btnContinueB)
        btnCancel   = findViewById(R.id.btnCancelB)

        // Read extras safely
        bedId = intent.getStringExtra(QRActivity.EXTRA_BED).orEmpty()
        locationId = intent.getStringExtra(QRBActivity.EXTRA_LOCATION).orEmpty()
        imageUri = intent.getStringExtra(QRBActivity.EXTRA_IMAGE_URI)?.let { Uri.parse(it) }

        // Show data
        txtBed.text = "Bed ID: $bedId"
        txtLocation.text = "Location ID: $locationId"
        imageUri?.let { imgPreview.setImageURI(it) }

        // Rescan (return to B scanner)
        btnRescan.setOnClickListener {
            val back = Intent(this, QRBActivity::class.java).apply {
                putExtra(QRActivity.EXTRA_BED, bedId) // keep the bedId context
            }
            startActivity(back)
            finish()
        }

        // Continue (go to final SummaryActivity)
        btnContinue.setOnClickListener {
            val next = Intent(this, SummaryActivity::class.java).apply {
                putExtra(QRActivity.EXTRA_BED, bedId)
                putExtra(QRBActivity.EXTRA_LOCATION, locationId)
                imageUri?.let { putExtra(QRBActivity.EXTRA_IMAGE_URI, it.toString()) }
            }
            startActivity(next)
            // finish() — optional; leave it if you want Back to return here
        }

        // Cancel (just close this screen)
        btnCancel.setOnClickListener { finish() }
    }
}






