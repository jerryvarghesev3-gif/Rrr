package com.connect.connection

import android.Manifest
import android.content.ContentValues
import android.content.Intent
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Build
import android.os.Bundle
import android.provider.MediaStore
import android.view.View
import android.widget.TextView
import android.widget.Toast
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import androidx.camera.core.*
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import androidx.core.content.ContextCompat
import androidx.core.content.FileProvider
import com.google.mlkit.vision.barcode.Barcode
import com.google.mlkit.vision.barcode.BarcodeScannerOptions
import com.google.mlkit.vision.barcode.BarcodeScanning
import com.google.mlkit.vision.common.InputImage
import java.io.File
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors
import java.util.concurrent.atomic.AtomicBoolean

class QRActivity : AppCompatActivity() {

    companion object {
        const val EXTRA_BED = "bedId"
        const val EXTRA_IMAGE_URI = "imageUri"
    }

    private lateinit var previewView: PreviewView
    private lateinit var txtInfo: TextView

    private lateinit var cameraExecutor: ExecutorService
    private var imageCapture: ImageCapture? = null

    // blocks analyzer while a frame is being processed
    private val decoding = AtomicBoolean(false)
    // prevents launching SummaryA more than once
    private val launchedSummary = AtomicBoolean(false)

    private var lastDecoded: String? = null

    private val requestCameraPerm =
        registerForActivityResult(ActivityResultContracts.RequestPermission()) { granted ->
            if (granted) startCamera() else {
                Toast.makeText(this, "Camera permission required", Toast.LENGTH_LONG).show()
                finish()
            }
        }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_qra)

        previewView = findViewById(R.id.previewViewA)
        txtInfo = findViewById(R.id.txtInfoA)

        cameraExecutor = Executors.newSingleThreadExecutor()

        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA)
            == PackageManager.PERMISSION_GRANTED
        ) startCamera() else requestCameraPerm.launch(Manifest.permission.CAMERA)
    }

    override fun onPause() {
        super.onPause()
        // Make sure nothing keeps analyzing in the background
        try { ProcessCameraProvider.getInstance(this).get().unbindAll() } catch (_: Exception) {}
    }

    override fun onDestroy() {
        super.onDestroy()
        try { cameraExecutor.shutdown() } catch (_: Exception) {}
    }

    @OptIn(ExperimentalGetImage::class)
    private fun startCamera() {
        val providerFuture = ProcessCameraProvider.getInstance(this)
        providerFuture.addListener({
            val provider = providerFuture.get()

            val preview = Preview.Builder().build().also {
                it.setSurfaceProvider(previewView.surfaceProvider)
            }

            imageCapture = ImageCapture.Builder()
                .setCaptureMode(ImageCapture.CAPTURE_MODE_MINIMIZE_LATENCY)
                .build()

            val analysis = ImageAnalysis.Builder()
                .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)
                .build()

            val scanner = BarcodeScanning.getClient(
                BarcodeScannerOptions.Builder()
                    .setBarcodeFormats(Barcode.FORMAT_QR_CODE)
                    .build()
            )

            analysis.setAnalyzer(cameraExecutor) { proxy ->
                // if we already launched Summary, ignore further frames
                if (launchedSummary.get()) { proxy.close(); return@setAnalyzer }

                try {
                    val media = proxy.image ?: run { proxy.close(); return@setAnalyzer }
                    if (decoding.get()) { proxy.close(); return@setAnalyzer }

                    decoding.set(true)
                    val input = InputImage.fromMediaImage(
                        media, proxy.imageInfo.rotationDegrees
                    )

                    scanner.process(input)
                        .addOnSuccessListener { codes ->
                            val value = codes.firstOrNull()?.rawValue?.trim()
                            if (!value.isNullOrEmpty()) {
                                // ensure we run this only once
                                if (launchedSummary.getAndSet(true)) {
                                    // already launched, ignore
                                } else {
                                    lastDecoded = value
                                    runOnUiThread { txtInfo.text = "Scanned: $value" }
                                    takePhotoAndOpenSummary()
                                }
                            }
                        }
                        .addOnFailureListener {
                            decoding.set(false)
                        }
                        .addOnCompleteListener {
                            proxy.close()
                            if (!launchedSummary.get()) decoding.set(false)
                        }
                } catch (_: Throwable) {
                    proxy.close()
                    decoding.set(false)
                }
            }

            try {
                provider.unbindAll()
                provider.bindToLifecycle(
                    this,
                    CameraSelector.DEFAULT_BACK_CAMERA,
                    preview,
                    imageCapture,
                    analysis
                )
                txtInfo.text = "Aim at Bed ID QR"
                previewView.visibility = View.VISIBLE
            } catch (_: Throwable) {
                Toast.makeText(this, "Camera start failed", Toast.LENGTH_LONG).show()
                finish()
            }
        }, ContextCompat.getMainExecutor(this))
    }

    private fun takePhotoAndOpenSummary() {
        val cap = imageCapture ?: return openSummary(null)
        val name = "qra_${System.currentTimeMillis()}.jpg"

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
            val values = ContentValues().apply {
                put(MediaStore.MediaColumns.DISPLAY_NAME, name)
                put(MediaStore.MediaColumns.MIME_TYPE, "image/jpeg")
                put(MediaStore.Images.Media.RELATIVE_PATH, "DCIM/Camera")
            }
            val opts = ImageCapture.OutputFileOptions
                .Builder(contentResolver, MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values)
                .build()
            cap.takePicture(
                opts,
                ContextCompat.getMainExecutor(this),
                object : ImageCapture.OnImageSavedCallback {
                    override fun onImageSaved(output: ImageCapture.OutputFileResults) {
                        openSummary(output.savedUri)
                    }
                    override fun onError(exc: ImageCaptureException) { openSummary(null) }
                }
            )
        } else {
            val dir = File(cacheDir, "images").apply { mkdirs() }
            val photo = File(dir, name)
            val uri = FileProvider.getUriForFile(this, "$packageName.fileprovider", photo)
            val opts = ImageCapture.OutputFileOptions.Builder(photo).build()
            cap.takePicture(
                opts,
                ContextCompat.getMainExecutor(this),
                object : ImageCapture.OnImageSavedCallback {
                    override fun onImageSaved(output: ImageCapture.OutputFileResults) {
                        openSummary(uri)
                    }
                    override fun onError(exc: ImageCaptureException) { openSummary(null) }
                }
            )
        }
    }

    private fun openSummary(photoUri: Uri?) {
        val bed = lastDecoded ?: return
        val i = Intent(this, SummaryAActivity::class.java).apply {
            putExtra(EXTRA_BED, bed)
            photoUri?.let { putExtra(EXTRA_IMAGE_URI, it.toString()) }
            // in case user spam-scanned, collapse stack
            addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_SINGLE_TOP)
        }
        startActivity(i)
        // Finish the scanner so it can't launch again underneath
        finish()
    }
}






package com.connect.connection

import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.widget.Button
import android.widget.ImageView
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity

class SummaryAActivity : AppCompatActivity() {

    private lateinit var txtBed: TextView
    private lateinit var imgPreview: ImageView
    private lateinit var btnRescan: Button
    private lateinit var btnCancel: Button
    private lateinit var btnContinue: Button

    private var bedId: String = ""
    private var imageUri: Uri? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_summary_a)

        txtBed = findViewById(R.id.txtBedA)
        imgPreview = findViewById(R.id.imgPreviewA)
        btnRescan = findViewById(R.id.btnRescanA)
        btnCancel = findViewById(R.id.btnCancelA)
        btnContinue = findViewById(R.id.btnContinueA)

        bedId = intent.getStringExtra(QRActivity.EXTRA_BED).orEmpty()
        intent.getStringExtra(QRActivity.EXTRA_IMAGE_URI)?.let { imageUri = Uri.parse(it) }

        txtBed.text = "Bed ID: $bedId"
        imageUri?.let { imgPreview.setImageURI(it) }

        // Relaunch a fresh scanner (since we finished it after navigation)
        btnRescan.setOnClickListener {
            startActivity(Intent(this, QRActivity::class.java)
                .addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP))
            finish()
        }

        btnCancel.setOnClickListener { finish() } // or finishAffinity() to exit flow

        btnContinue.setOnClickListener {
            val i = Intent(this, QRBActivity::class.java).apply {
                putExtra(QRActivity.EXTRA_BED, bedId)
                imageUri?.let { putExtra(QRActivity.EXTRA_IMAGE_URI, it.toString()) }
            }
            startActivity(i)
        }
    }
}






