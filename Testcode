package com.connect.connection

import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.widget.Button
import android.widget.ImageView
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import org.eclipse.paho.client.mqttv3.IMqttActionListener
import org.eclipse.paho.client.mqttv3.IMqttToken
import org.eclipse.paho.client.mqttv3.MqttCallbackExtended
import org.eclipse.paho.client.mqttv3.MqttMessage
import org.json.JSONObject

class SummaryBActivity : AppCompatActivity() {

    // --- UI ---
    private lateinit var txtGateway: TextView
    private lateinit var txtBed: TextView
    private lateinit var txtLocation: TextView
    private lateinit var txtInfo: TextView
    private lateinit var imgPreview: ImageView
    private lateinit var btnBack: Button
    private lateinit var btnNext: Button

    // --- data coming from BActivity ---
    private var gatewayId = ""
    private var bedId = ""
    private var locationId = ""
    private var imageUri: Uri? = null

    // keep the response topic so we can route and unsubscribe
    private var responseTopic: String? = null

    companion object {
        // use the same keys you already use elsewhere
        const val EXTRA_GATEWAY = "gatewayId"
        const val EXTRA_BED = "bedId"
        const val EXTRA_IMAGE_URI = "imageUri"
        const val EXTRA_LOCATION = "locationId"
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_summary_b)

        // bind
        txtGateway  = findViewById(R.id.txtGatewayB)
        txtBed      = findViewById(R.id.txtBedB)
        txtLocation = findViewById(R.id.txtLocationB)
        txtInfo     = findViewById(R.id.txtInfoB)
        imgPreview  = findViewById(R.id.imgPreviewB)
        btnBack     = findViewById(R.id.btnBackB)
        btnNext     = findViewById(R.id.btnNextB)

        // read extras
        gatewayId  = intent.getStringExtra(EXTRA_GATEWAY).orEmpty()
        bedId      = intent.getStringExtra(EXTRA_BED).orEmpty()
        locationId = intent.getStringExtra(EXTRA_LOCATION).orEmpty()
        intent.getStringExtra(EXTRA_IMAGE_URI)?.let { imageUri = Uri.parse(it) }

        // show
        txtGateway.text  = "Gateway: $gatewayId"
        txtBed.text      = "Bed ID: $bedId"
        txtLocation.text = "Location ID: $locationId"
        imageUri?.let { imgPreview.setImageURI(it) }

        btnBack.setOnClickListener { finish() }

        btnNext.setOnClickListener {
            if (gatewayId.isEmpty() || bedId.isEmpty() || locationId.isEmpty()) {
                Toast.makeText(this, "Missing IDs", Toast.LENGTH_SHORT).show()
                return@setOnClickListener
            }
            txtInfo.text = "Setting location…"
            btnNext.isEnabled = false
            prepareMqttAndSend()   // subscribe → set callback → publish
        }
    }

    /**
     * Subscribes to the response topic, installs a callback that routes only the
     * set_location reply for this bed, then publishes the request.
     */
    private fun prepareMqttAndSend(force: Boolean = false) {
        val c = MqttHolder.readyClientOrNull() ?: run {
            txtInfo.text = "MQTT not connected"
            btnNext.isEnabled = true
            return
        }

        // response topic for this bed
        responseTopic = topicSetLocationResp(bedId)

        // 1) subscribe (idempotent if already subscribed)
        c.subscribe(responseTopic, 1, /* userContext = */ null,
            object : IMqttActionListener {
                override fun onSuccess(asyncActionToken: IMqttToken?) {
                    // 2) after subscribe, install the callback that filters by topic
                    c.setCallback(object : MqttCallbackExtended {
                        override fun connectComplete(reconnect: Boolean, serverURI: String?) {}
                        override fun connectionLost(cause: Throwable?) {}
                        override fun messageArrived(topic: String?, message: MqttMessage?) {
                            if (topic == responseTopic) {
                                val payload = message?.toString().orEmpty()
                                runOnUiThread { handleSetLocationResponse(payload) }
                            }
                        }
                        override fun deliveryComplete(token: IMqttToken?) {}
                    })

                    // 3) publish the request
                    publishSetLocation(force)
                }
                override fun onFailure(asyncActionToken: IMqttToken?, exception: Throwable?) {
                    txtInfo.text = "Subscribe failed: ${exception?.message}"
                    btnNext.isEnabled = true
                }
            }
        )
    }

    /** Builds and publishes: { command:"set_location", data:{bedId,locationId,force} } to gw/{gw}/req/set_location */
    private fun publishSetLocation(force: Boolean) {
        val c = MqttHolder.client ?: return

        val reqTopic = topicSetLocationReq(gatewayId)

        val data = JSONObject().apply {
            put("bedId", bedId)
            put("locationId", locationId)
            put("force", force)
        }
        val req = JSONObject().apply {
            put("command", "set_location")
            put("data", data)
        }
        val payload = req.toString().toByteArray(Charsets.UTF_8)

        c.publish(
            reqTopic,
            payload,
            /* qos = */ 1,
            /* retained = */ false,
            /* userContext = */ null,
            object : IMqttActionListener {
                override fun onSuccess(asyncActionToken: IMqttToken?) {
                    // now we wait for the response on responseTopic
                    txtInfo.text = "Waiting for gateway reply…"
                }
                override fun onFailure(asyncActionToken: IMqttToken?, exception: Throwable?) {
                    txtInfo.text = "Publish failed: ${exception?.message}"
                    btnNext.isEnabled = true
                }
            }
        )
    }

    /** Parse reply JSON and navigate to final SummaryActivity */
    private fun handleSetLocationResponse(json: String) {
        try {
            val root = JSONObject(json)
            val status = root.optInt("status", -1)

            // some backends echo location inside "data"
            val loc = root.optJSONObject("data")
                ?.optString("locationId")
                ?.takeIf { it.isNotBlank() }
                ?: locationId

            // go to final SummaryActivity (no image here)
            val i = Intent(this, SummaryActivity::class.java).apply {
                putExtra("gatewayId", gatewayId)
                putExtra("bedId", bedId)
                putExtra("locationId", loc)
                putExtra("status", status)
            }
            startActivity(i)
            finish()

        } catch (t: Throwable) {
            txtInfo.text = "Response parse error: ${t.message}"
            btnNext.isEnabled = true
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        // best-effort cleanup: unsubscribe and restore a harmless callback (cannot pass null)
        try {
            responseTopic?.let { topic ->
                MqttHolder.client?.unsubscribe(topic)
            }
            MqttHolder.client?.setCallback(object : MqttCallbackExtended {
                override fun connectComplete(reconnect: Boolean, serverURI: String?) {}
                override fun connectionLost(cause: Throwable?) {}
                override fun messageArrived(topic: String?, message: MqttMessage?) {}
                override fun deliveryComplete(token: IMqttToken?) {}
            })
        } catch (_: Exception) { }
    }

    // ---- topic helpers (match your old names) ----
    private fun topicSetLocationReq(gw: String) = "gw/$gw/req/set_location"
    private fun topicSetLocationResp(bed: String) = "bed/$bed/resp/set_location"
}
