package com.connect.connection

import android.Manifest
import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.util.Log
import android.widget.Button
import android.widget.TextView
import android.widget.Toast
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import androidx.camera.core.*
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import androidx.core.content.ContextCompat
import androidx.core.content.FileProvider
import com.google.mlkit.vision.barcode.Barcode
import com.google.mlkit.vision.barcode.BarcodeScannerOptions
import com.google.mlkit.vision.barcode.BarcodeScanning
import com.google.mlkit.vision.common.InputImage
import java.io.File
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors
import java.util.concurrent.atomic.AtomicBoolean

class AActivity : AppCompatActivity() {

    private lateinit var previewView: PreviewView
    private lateinit var txtScanValue: TextView
    private lateinit var btnRescan: Button
    private lateinit var btnContinue: Button
    private lateinit var btnCancel: Button

    private lateinit var cameraExecutor: ExecutorService
    private var imageCapture: ImageCapture? = null
    private val analyzing = AtomicBoolean(true)
    private var lastDecoded: String? = null

    private val scanner by lazy {
        val opts = BarcodeScannerOptions.Builder()
            .setBarcodeFormats(
                Barcode.FORMAT_QR_CODE,
                Barcode.FORMAT_CODE_128, Barcode.FORMAT_CODE_39, Barcode.FORMAT_CODE_93,
                Barcode.FORMAT_EAN_13,  Barcode.FORMAT_EAN_8,
                Barcode.FORMAT_UPC_A,   Barcode.FORMAT_UPC_E,
                Barcode.FORMAT_AZTEC,   Barcode.FORMAT_DATA_MATRIX
            ).build()
        BarcodeScanning.getClient(opts)
    }

    private val permCamera = registerForActivityResult(
        ActivityResultContracts.RequestPermission()
    ) { granted ->
        if (granted) startCamera() else {
            Toast.makeText(this, "Camera permission required", Toast.LENGTH_SHORT).show()
            finish()
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_qra)

        previewView   = findViewById(R.id.previewView)
        txtScanValue  = findViewById(R.id.txtScanValue)
        btnRescan     = findViewById(R.id.btnRescan)
        btnContinue   = findViewById(R.id.btnContinue)
        btnCancel     = findViewById(R.id.btnCancel)

        cameraExecutor = Executors.newSingleThreadExecutor()

        btnContinue.isEnabled = false
        txtScanValue.text = ""

        btnRescan.setOnClickListener { resetScan() }
        btnCancel.setOnClickListener { finish() }
        btnContinue.setOnClickListener {
            val value = lastDecoded
            if (value.isNullOrEmpty()) {
                Toast.makeText(this, "No code scanned yet", Toast.LENGTH_SHORT).show()
            } else {
                capturePhotoAndOpenSummary(value)
            }
        }

        permCamera.launch(Manifest.permission.CAMERA)
    }

    private fun resetScan() {
        lastDecoded = null
        txtScanValue.text = ""
        btnContinue.isEnabled = false
        analyzing.set(true)
        Toast.makeText(this, "Ready to scanâ€¦", Toast.LENGTH_SHORT).show()
    }

    private fun startCamera() {
        val future = ProcessCameraProvider.getInstance(this)
        future.addListener({
            val provider = future.get()

            val preview = Preview.Builder().build().also {
                it.setSurfaceProvider(previewView.surfaceProvider)
            }
            val analysis = ImageAnalysis.Builder()
                .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)
                .build().apply {
                    setAnalyzer(cameraExecutor) { proxy -> analyze(proxy) }
                }
            imageCapture = ImageCapture.Builder()
                .setCaptureMode(ImageCapture.CAPTURE_MODE_MINIMIZE_LATENCY)
                .build()

            try {
                provider.unbindAll()
                provider.bindToLifecycle(
                    this, CameraSelector.DEFAULT_BACK_CAMERA, preview, analysis, imageCapture
                )
            } catch (t: Throwable) {
                Log.e("AActivity", "bindToLifecycle failed", t)
                Toast.makeText(this, "Camera init failed", Toast.LENGTH_SHORT).show()
            }
        }, ContextCompat.getMainExecutor(this))
    }

    private fun analyze(imageProxy: ImageProxy) {
        val mediaImage = imageProxy.image ?: run { imageProxy.close(); return }
        if (!analyzing.get()) { imageProxy.close(); return }

        val image = InputImage.fromMediaImage(mediaImage, imageProxy.imageInfo.rotationDegrees)
        scanner.process(image)
            .addOnSuccessListener { codes ->
                val first = codes.firstOrNull { !it.rawValue.isNullOrEmpty() }
                val value = first?.rawValue
                if (value != null && analyzing.compareAndSet(true, false)) {
                    lastDecoded = value
                    runOnUiThread {
                        txtScanValue.text = value
                        btnContinue.isEnabled = true
                    }
                }
            }
            .addOnFailureListener { Log.e("AActivity", "scan fail", it) }
            .addOnCompleteListener { imageProxy.close() }
    }

    private fun capturePhotoAndOpenSummary(value: String) {
        val ic = imageCapture
        if (ic == null) {
            openSummary(value, null)
            return
        }
        val dir = File(cacheDir, "images").apply { mkdirs() }
        val file = File(dir, "qrA_${System.currentTimeMillis()}.jpg")
        val opts = ImageCapture.OutputFileOptions.Builder(file).build()

        ic.takePicture(
            opts, ContextCompat.getMainExecutor(this),
            object : ImageCapture.OnImageSavedCallback {
                override fun onImageSaved(r: ImageCapture.OutputFileResults) {
                    val uri = FileProvider.getUriForFile(
                        this@AActivity, "${packageName}.fileprovider", file
                    )
                    openSummary(value, uri)
                }
                override fun onError(e: ImageCaptureException) {
                    openSummary(value, null)
                }
            }
        )
    }

    private fun openSummary(value: String, uri: Uri?) {
        val i = Intent(this, SummaryAActivity::class.java).apply {
            putExtra("qrA_value", value)
            uri?.let {
                putExtra("qrA_uri", it.toString())
                addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)
            }
        }
        startActivity(i)
    }

    override fun onDestroy() {
        super.onDestroy()
        try { scanner.close() } catch (_: Exception) {}
        if (::cameraExecutor.isInitialized) cameraExecutor.shutdown()
    }
}






package com.connect.connection

import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.widget.Button
import android.widget.ImageView
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity

class SummaryAActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_summary_a)

        val value = intent.getStringExtra("qrA_value").orEmpty()
        val uriStr = intent.getStringExtra("qrA_uri")
        val uri = uriStr?.let(Uri::parse)

        findViewById<TextView>(R.id.qrValueA).text = value
        val img = findViewById<ImageView>(R.id.qrImageA)
        if (uri != null) img.setImageURI(uri) else img.setImageDrawable(null)

        findViewById<Button>(R.id.btnNextToB).setOnClickListener {
            startActivity(Intent(this, BActivity::class.java))
        }
    }
}








package com.connect.connection

import android.Manifest
import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.util.Log
import android.widget.Button
import android.widget.TextView
import android.widget.Toast
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import androidx.camera.core.*
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import androidx.core.content.ContextCompat
import androidx.core.content.FileProvider
import com.google.mlkit.vision.barcode.Barcode
import com.google.mlkit.vision.barcode.BarcodeScannerOptions
import com.google.mlkit.vision.barcode.BarcodeScanning
import com.google.mlkit.vision.common.InputImage
import java.io.File
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors
import java.util.concurrent.atomic.AtomicBoolean

class BActivity : AppCompatActivity() {

    private lateinit var previewView: PreviewView
    private lateinit var txtScanValue: TextView
    private lateinit var btnRescan: Button
    private lateinit var btnContinue: Button
    private lateinit var btnCancel: Button

    private lateinit var cameraExecutor: ExecutorService
    private var imageCapture: ImageCapture? = null
    private val analyzing = AtomicBoolean(true)
    private var lastDecoded: String? = null

    private val scanner by lazy {
        val opts = BarcodeScannerOptions.Builder()
            .setBarcodeFormats(
                Barcode.FORMAT_QR_CODE,
                Barcode.FORMAT_CODE_128, Barcode.FORMAT_CODE_39, Barcode.FORMAT_CODE_93,
                Barcode.FORMAT_EAN_13,  Barcode.FORMAT_EAN_8,
                Barcode.FORMAT_UPC_A,   Barcode.FORMAT_UPC_E,
                Barcode.FORMAT_AZTEC,   Barcode.FORMAT_DATA_MATRIX
            ).build()
        BarcodeScanning.getClient(opts)
    }

    private val permCamera = registerForActivityResult(
        ActivityResultContracts.RequestPermission()
    ) { granted ->
        if (granted) startCamera() else {
            Toast.makeText(this, "Camera permission required", Toast.LENGTH_SHORT).show()
            finish()
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_qrb)

        previewView   = findViewById(R.id.previewView)
        txtScanValue  = findViewById(R.id.txtScanValue)
        btnRescan     = findViewById(R.id.btnRescan)
        btnContinue   = findViewById(R.id.btnContinue)
        btnCancel     = findViewById(R.id.btnCancel)

        cameraExecutor = Executors.newSingleThreadExecutor()

        btnContinue.isEnabled = false
        txtScanValue.text = ""

        btnRescan.setOnClickListener { resetScan() }
        btnCancel.setOnClickListener { finish() }
        btnContinue.setOnClickListener {
            val value = lastDecoded
            if (value.isNullOrEmpty()) {
                Toast.makeText(this, "No code scanned yet", Toast.LENGTH_SHORT).show()
            } else {
                capturePhotoAndOpenSummary(value)
            }
        }

        permCamera.launch(Manifest.permission.CAMERA)
    }

    private fun resetScan() {
        lastDecoded = null
        txtScanValue.text = ""
        btnContinue.isEnabled = false
        analyzing.set(true)
        Toast.makeText(this, "Ready to scanâ€¦", Toast.LENGTH_SHORT).show()
    }

    private fun startCamera() {
        val future = ProcessCameraProvider.getInstance(this)
        future.addListener({
            val provider = future.get()

            val preview = Preview.Builder().build().also {
                it.setSurfaceProvider(previewView.surfaceProvider)
            }
            val analysis = ImageAnalysis.Builder()
                .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)
                .build().apply {
                    setAnalyzer(cameraExecutor) { proxy -> analyze(proxy) }
                }
            imageCapture = ImageCapture.Builder()
                .setCaptureMode(ImageCapture.CAPTURE_MODE_MINIMIZE_LATENCY)
                .build()

            try {
                provider.unbindAll()
                provider.bindToLifecycle(
                    this, CameraSelector.DEFAULT_BACK_CAMERA, preview, analysis, imageCapture
                )
            } catch (t: Throwable) {
                Log.e("BActivity", "bindToLifecycle failed", t)
                Toast.makeText(this, "Camera init failed", Toast.LENGTH_SHORT).show()
            }
        }, ContextCompat.getMainExecutor(this))
    }

    private fun analyze(imageProxy: ImageProxy) {
        val mediaImage = imageProxy.image ?: run { imageProxy.close(); return }
        if (!analyzing.get()) { imageProxy.close(); return }

        val image = InputImage.fromMediaImage(mediaImage, imageProxy.imageInfo.rotationDegrees)
        scanner.process(image)
            .addOnSuccessListener { codes ->
                val first = codes.firstOrNull { !it.rawValue.isNullOrEmpty() }
                val value = first?.rawValue
                if (value != null && analyzing.compareAndSet(true, false)) {
                    lastDecoded = value
                    runOnUiThread {
                        txtScanValue.text = value
                        btnContinue.isEnabled = true
                    }
                }
            }
            .addOnFailureListener { Log.e("BActivity", "scan fail", it) }
            .addOnCompleteListener { imageProxy.close() }
    }

    private fun capturePhotoAndOpenSummary(value: String) {
        val ic = imageCapture
        if (ic == null) {
            openSummary(value, null)
            return
        }
        val dir = File(cacheDir, "images").apply { mkdirs() }
        val file = File(dir, "qrB_${System.currentTimeMillis()}.jpg")
        val opts = ImageCapture.OutputFileOptions.Builder(file).build()

        ic.takePicture(
            opts, ContextCompat.getMainExecutor(this),
            object : ImageCapture.OnImageSavedCallback {
                override fun onImageSaved(r: ImageCapture.OutputFileResults) {
                    val uri = FileProvider.getUriForFile(
                        this@BActivity, "${packageName}.fileprovider", file
                    )
                    openSummary(value, uri)
                }
                override fun onError(e: ImageCaptureException) {
                    openSummary(value, null)
                }
            }
        )
    }

    private fun openSummary(value: String, uri: Uri?) {
        val i = Intent(this, SummaryBActivity::class.java).apply {
            putExtra("qrB_value", value)
            uri?.let {
                putExtra("qrB_uri", it.toString())
                addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)
            }
        }
        startActivity(i)
    }

    override fun onDestroy() {
        super.onDestroy()
        try { scanner.close() } catch (_: Exception) {}
        if (::cameraExecutor.isInitialized) cameraExecutor.shutdown()
    }
}





package com.connect.connection

import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.widget.Button
import android.widget.ImageView
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity

class SummaryBActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_summary_b)

        val value = intent.getStringExtra("qrB_value").orEmpty()
        val uriStr = intent.getStringExtra("qrB_uri")
        val uri = uriStr?.let(Uri::parse)

        findViewById<TextView>(R.id.qrValueB).text = value
        val img = findViewById<ImageView>(R.id.qrImageB)
        if (uri != null) img.setImageURI(uri) else img.setImageDrawable(null)

        findViewById<Button>(R.id.btnDone).setOnClickListener {
            // to your existing final SummaryActivity (unchanged logic)
            val i = Intent(this, SummaryActivity::class.java).apply {
                addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_SINGLE_TOP)
            }
            startActivity(i)
            finish()
        }
    }
}







<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <!-- Full-bleed background (optional) -->
    <ImageView
        android:id="@+id/bgImage"
        android:layout_width="0dp"
        android:layout_height="0dp"
        android:scaleType="centerCrop"
        android:src="@drawable/bg_home"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

    <!-- Camera preview -->
    <androidx.camera.view.PreviewView
        android:id="@+id/previewView"
        android:layout_width="0dp"
        android:layout_height="0dp"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toTopOf="@id/bottomBarA"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

    <!-- Scanned value -->
    <TextView
        android:id="@+id/txtScanValue"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text=""
        android:textSize="16sp"
        android:textColor="@android:color/white"
        android:padding="12dp"
        app:layout_constraintBottom_toTopOf="@id/bottomBarA"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

    <!-- Bottom stacked buttons -->
    <LinearLayout
        android:id="@+id/bottomBarA"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="16dp"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent">

        <Button
            android:id="@+id/btnRescan"
            android:layout_width="match_parent"
            android:layout_height="48dp"
            android:layout_marginBottom="8dp"
            android:text="@string/rescan"
            android:textAllCaps="true"
            android:textColor="@android:color/white"
            android:background="@drawable/btn_green_square" />

        <Button
            android:id="@+id/btnContinue"
            android:layout_width="match_parent"
            android:layout_height="48dp"
            android:layout_marginBottom="8dp"
            android:text="@string/continue_txt"
            android:textAllCaps="true"
            android:textColor="@android:color/white"
            android:background="@drawable/btn_green_square" />

        <Button
            android:id="@+id/btnCancel"
            android:layout_width="match_parent"
            android:layout_height="48dp"
            android:text="@string/cancel"
            android:textAllCaps="true"
            android:textColor="@android:color/white"
            android:background="@drawable/btn_green_square" />
    </LinearLayout>

</androidx.constraintlayout.widget.ConstraintLayout>






<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:padding="16dp">

    <TextView
        android:id="@+id/qrValueA"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text="A value"
        android:textSize="18sp"
        android:textStyle="bold"
        android:textColor="@android:color/white"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

    <ImageView
        android:id="@+id/qrImageA"
        android:layout_width="0dp"
        android:layout_height="0dp"
        android:adjustViewBounds="true"
        android:scaleType="centerInside"
        app:layout_constraintTop_toBottomOf="@id/qrValueA"
        app:layout_constraintBottom_toTopOf="@id/btnNextToB"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

    <Button
        android:id="@+id/btnNextToB"
        android:layout_width="0dp"
        android:layout_height="48dp"
        android:text="NEXT"
        android:textAllCaps="true"
        android:textColor="@android:color/white"
        android:background="@drawable/btn_green_square"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>
</androidx.constraintlayout.widget.ConstraintLayout>






<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <ImageView
        android:id="@+id/bgImage"
        android:layout_width="0dp"
        android:layout_height="0dp"
        android:scaleType="centerCrop"
        android:src="@drawable/bg_home"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

    <androidx.camera.view.PreviewView
        android:id="@+id/previewView"
        android:layout_width="0dp"
        android:layout_height="0dp"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toTopOf="@id/bottomBarB"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

    <TextView
        android:id="@+id/txtScanValue"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text=""
        android:textSize="16sp"
        android:textColor="@android:color/white"
        android:padding="12dp"
        app:layout_constraintBottom_toTopOf="@id/bottomBarB"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

    <LinearLayout
        android:id="@+id/bottomBarB"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="16dp"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent">

        <Button
            android:id="@+id/btnRescan"
            android:layout_width="match_parent"
            android:layout_height="48dp"
            android:layout_marginBottom="8dp"
            android:text="@string/rescan"
            android:textAllCaps="true"
            android:textColor="@android:color/white"
            android:background="@drawable/btn_green_square" />

        <Button
            android:id="@+id/btnContinue"
            android:layout_width="match_parent"
            android:layout_height="48dp"
            android:layout_marginBottom="8dp"
            android:text="@string/continue_txt"
            android:textAllCaps="true"
            android:textColor="@android:color/white"
            android:background="@drawable/btn_green_square" />

        <Button
            android:id="@+id/btnCancel"
            android:layout_width="match_parent"
            android:layout_height="48dp"
            android:text="@string/cancel"
            android:textAllCaps="true"
            android:textColor="@android:color/white"
            android:background="@drawable/btn_green_square" />
    </LinearLayout>

</androidx.constraintlayout.widget.ConstraintLayout>





<androidx.constraintlayout.widget.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:padding="16dp">

    <TextView
        android:id="@+id/qrValueB"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text="B value"
        android:textSize="18sp"
        android:textStyle="bold"
        android:textColor="@android:color/white"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

    <ImageView
        android:id="@+id/qrImageB"
        android:layout_width="0dp"
        android:layout_height="0dp"
        android:adjustViewBounds="true"
        android:scaleType="centerInside"
        app:layout_constraintTop_toBottomOf="@id/qrValueB"
        app:layout_constraintBottom_toTopOf="@id/btnDone"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>

    <Button
        android:id="@+id/btnDone"
        android:layout_width="0dp"
        android:layout_height="48dp"
        android:text="@string/continue_txt"   <!-- or "DONE" if you have a string -->
        android:textAllCaps="true"
        android:textColor="@android:color/white"
        android:background="@drawable/btn_green_square"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"/>
</androidx.constraintlayout.widget.ConstraintLayout>





<provider
    android:name="androidx.core.content.FileProvider"
    android:authorities="${applicationId}.fileprovider"
    android:exported="false"
    android:grantUriPermissions="true">
    <meta-data
        android:name="android.support.FILE_PROVIDER_PATHS"
        android:resource="@xml/fileprovider_paths" />
</provider>




<?xml version="1.0" encoding="utf-8"?>
<paths xmlns:android="http://schemas.android.com/apk/res/android">
    <!-- We save to /cache/images/... -->
    <cache-path name="images" path="images/"/>
    <!-- (Optional) be permissive: <cache-path name="cache" path="."/> -->
</paths>







