class QRActivity : AppCompatActivity() {

    // --- views ---
    private lateinit var previewView: PreviewView
    private lateinit var txtScanValue: TextView
    private lateinit var btnRescan: Button
    private lateinit var btnContinue: Button
    private lateinit var btnCancel: Button

    // --- camera / capture ---
    private lateinit var cameraExecutor: ExecutorService
    private var imageCapture: ImageCapture? = null
    private val analyzing = AtomicBoolean(false)
    private var lastDecoded: String? = null

    // permission launcher
    private val requestCameraPerm =
        registerForActivityResult(ActivityResultContracts.RequestPermission()) { granted ->
            if (granted) startCamera() else finish()
        }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_qra)   // your layout name as in the screenshot

        // views
        previewView   = findViewById(R.id.previewView)
        txtScanValue  = findViewById(R.id.txtScanValue)
        btnRescan     = findViewById(R.id.btnRescan)
        btnContinue   = findViewById(R.id.btnContinue)
        btnCancel     = findViewById(R.id.btnCancel)

        cameraExecutor = Executors.newSingleThreadExecutor()

        // buttons
        btnRescan.setOnClickListener {
            lastDecoded = null
            txtScanValue.text = ""
            analyzing.set(true)     // let analyzer decode again
        }

        btnCancel.setOnClickListener { finish() }

        btnContinue.setOnClickListener {
            val value = lastDecoded
            if (value.isNullOrBlank()) {
                Toast.makeText(this, "Scan a QR first", Toast.LENGTH_SHORT).show()
                return@setOnClickListener
            }
            // take photo (optional). If you only want text, call openSummary(value, null)
            takePhotoAndOpenSummary(value)
        }

        // permission + start
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA)
            == PackageManager.PERMISSION_GRANTED
        ) {
            startCamera()
        } else {
            requestCameraPerm.launch(Manifest.permission.CAMERA)
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        try { cameraExecutor.shutdown() } catch (_: Exception) {}
    }

    // --- camera setup ---
    private fun startCamera() {
        val cameraProviderFuture = ProcessCameraProvider.getInstance(this)
        cameraProviderFuture.addListener({
            val cameraProvider = cameraProviderFuture.get()

            val preview = Preview.Builder().build().also {
                it.setSurfaceProvider(previewView.surfaceProvider)
            }

            imageCapture = ImageCapture.Builder()
                .setCaptureMode(ImageCapture.CAPTURE_MODE_MINIMIZE_LATENCY)
                .build()

            val analyzer = ImageAnalysis.Builder().build().also { ia ->
                ia.setAnalyzer(cameraExecutor) { imageProxy ->
                    // your MLKit barcode analysis; call onDecoded(text) on success
                    // ...
                    imageProxy.close()
                }
            }

            val selector = CameraSelector.DEFAULT_BACK_CAMERA

            cameraProvider.unbindAll()
            cameraProvider.bindToLifecycle(
                this, selector, preview, imageCapture, analyzer
            )

        }, ContextCompat.getMainExecutor(this))
    }

    // call this when MLKit found a code
    private fun onDecoded(text: String) {
        if (analyzing.compareAndSet(true, false)) {
            lastDecoded = text
            runOnUiThread { txtScanValue.text = text }
        }
    }

    // --- photo + navigation ---
    private fun takePhotoAndOpenSummary(value: String) {
        val cap = imageCapture ?: return openSummary(value, null)

        val outDir = File(cacheDir, "images").apply { mkdirs() }
        val photo = File(outDir, "qra_${System.currentTimeMillis()}.jpg")

        val uri = FileProvider.getUriForFile(
            this, "${packageName}.fileprovider", photo
        )

        val output = ImageCapture.OutputFileOptions.Builder(contentResolver,
            MediaStore.Images.Media.EXTERNAL_CONTENT_URI, ContentValues().apply {
                put(MediaStore.MediaColumns.DISPLAY_NAME, photo.name)
                put(MediaStore.MediaColumns.MIME_TYPE, "image/jpeg")
                put(MediaStore.MediaColumns.RELATIVE_PATH, "DCIM/Camera") // or omit to keep in cache
            }).build()

        cap.takePicture(
            output,
            ContextCompat.getMainExecutor(this),
            object : ImageCapture.OnImageSavedCallback {
                override fun onImageSaved(result: ImageCapture.OutputFileResults) {
                    // prefer the saved Uri; fall back to FileProvider one
                    val savedUri = result.savedUri ?: uri
                    openSummary(value, savedUri)
                }
                override fun onError(e: ImageCaptureException) {
                    openSummary(value, null)
                }
            }
        )
    }

    private fun openSummary(value: String, uri: Uri?) {
        val i = Intent(this, SummaryAActivity::class.java).apply {
            putExtra("qrA_value", value)
            uri?.let {
                putExtra("qrA_uri", it.toString())
                addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)
            }
        }
        startActivity(i)
    }
}
