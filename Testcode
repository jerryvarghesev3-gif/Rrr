class QRBActivity : AppCompatActivity() {

    companion object {
        const val EXTRA_GATEWAY   = "gatewayId"
        const val EXTRA_BED       = "bedId"
        const val EXTRA_LOCATION  = "locationId"
        const val EXTRA_IMAGE_URI = "imageUri"
    }

    private lateinit var previewView: PreviewView
    private lateinit var txtScanValue: TextView
    private lateinit var btnRescan: Button
    private lateinit var btnContinue: Button
    private lateinit var btnCancel: Button

    private var gatewayId: String = ""
    private var bedId: String = ""
    private var imageUri: Uri? = null

    private var locationId: String? = null
    private var analyzing = AtomicBoolean(true)

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // Use the scanner layout that contains previewView & the 3 buttons
        setContentView(R.layout.activity_qrb)

        // Read what SummaryA sent us
        gatewayId = intent.getStringExtra(EXTRA_GATEWAY).orEmpty()
        bedId     = intent.getStringExtra(EXTRA_BED).orEmpty()
        imageUri  = intent.getStringExtra(EXTRA_IMAGE_URI)?.let { Uri.parse(it) }

        // Bind views (IDs must exist in activity_qrb.xml)
        previewView  = findViewById(R.id.previewView)     // or previewViewB if thatâ€™s your id
        txtScanValue = findViewById(R.id.txtScanValue)
        btnRescan    = findViewById(R.id.btnRescan)
        btnContinue  = findViewById(R.id.btnContinue)
        btnCancel    = findViewById(R.id.btnCancel)

        // UI defaults for location scan
        txtScanValue.text = "Aim at Location QR"
        btnContinue.isEnabled = false

        btnRescan.setOnClickListener {
            locationId = null
            txtScanValue.text = ""
            analyzing.set(true)
            btnContinue.isEnabled = false
        }
        btnCancel.setOnClickListener { finish() }

        btnContinue.setOnClickListener {
            val loc = locationId?.trim().orEmpty()
            if (loc.isEmpty()) {
                Toast.makeText(this, "Scan a Location QR first", Toast.LENGTH_SHORT).show()
                return@setOnClickListener
            }
            openSummaryB(loc)
        }

        // start camera + barcode
        startCameraForLocation()
    }

    private fun startCameraForLocation() {
        val cameraProviderFuture = ProcessCameraProvider.getInstance(this)
        cameraProviderFuture.addListener({
            val cameraProvider = cameraProviderFuture.get()

            val preview = Preview.Builder().build().also {
                it.setSurfaceProvider(previewView.surfaceProvider)
            }

            val analysis = ImageAnalysis.Builder()
                .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)
                .build()

            val options = BarcodeScannerOptions.Builder()
                .setBarcodeFormats(Barcode.FORMAT_QR_CODE)
                .build()
            val scanner = BarcodeScanning.getClient(options)

            analysis.setAnalyzer(ContextCompat.getMainExecutor(this)) { proxy ->
                val media = proxy.image ?: run { proxy.close(); return@setAnalyzer }
                if (!analyzing.get()) { proxy.close(); return@setAnalyzer }

                val image = InputImage.fromMediaImage(media, proxy.imageInfo.rotationDegrees)
                scanner.process(image)
                    .addOnSuccessListener { barcodes ->
                        val txt = barcodes.firstOrNull()?.rawValue
                        if (!txt.isNullOrBlank() && analyzing.compareAndSet(true, false)) {
                            locationId = txt.trim()
                            txtScanValue.text = locationId
                            btnContinue.isEnabled = true
                        }
                    }
                    .addOnCompleteListener { proxy.close() }
            }

            val selector = CameraSelector.DEFAULT_BACK_CAMERA

            cameraProvider.unbindAll()
            cameraProvider.bindToLifecycle(this, selector, preview, analysis)
        }, ContextCompat.getMainExecutor(this))
    }

    private fun openSummaryB(locId: String) {
        val i = Intent(this, SummaryBActivity::class.java).apply {
            putExtra(EXTRA_GATEWAY, gatewayId)
            putExtra(EXTRA_BED, bedId)
            putExtra(EXTRA_LOCATION, locId)
            imageUri?.let { putExtra(EXTRA_IMAGE_URI, it.toString()) }
        }
        startActivity(i)
    }
}
