
package com.connect.connection

import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.widget.Button
import android.widget.ImageView
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import org.eclipse.paho.client.mqttv3.IMqttActionListener
import org.eclipse.paho.client.mqttv3.MqttCallbackExtended
import org.eclipse.paho.client.mqttv3.MqttMessage
import org.json.JSONObject

class SummaryBActivity : AppCompatActivity() {

    // ---- UI ----
    private lateinit var txtGateway: TextView
    private lateinit var txtBed: TextView
    private lateinit var txtLocation: TextView
    private lateinit var txtInfo: TextView
    private lateinit var imgPreview: ImageView
    private lateinit var btnBack: Button
    private lateinit var btnNext: Button

    // ---- data coming from BActivity ----
    private var gatewayId: String = ""
    private var bedId: String = ""
    private var locationId: String = ""
    private var imageUri: Uri? = null

    companion object {
        // same string keys as AActivity (QRActivity) companion object
        const val EXTRA_GATEWAY = "gatewayId"
        const val EXTRA_BED = "bedId"
        const val EXTRA_IMAGE_URI = "imageUri"
        const val EXTRA_LOCATION = "locationId"
    }

    // remember what we subscribed to so we can cleanly unsubscribe
    private var responseTopic: String? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_summary_b)

        // bind views (IDs must match your activity_summary_b.xml)
        txtGateway   = findViewById(R.id.txtGatewayB)
        txtBed       = findViewById(R.id.txtBedB)
        txtLocation  = findViewById(R.id.txtLocationB)
        txtInfo      = findViewById(R.id.txtInfoB)
        imgPreview   = findViewById(R.id.imgPreviewB)
        btnBack      = findViewById(R.id.btnBackB)
        btnNext      = findViewById(R.id.btnNextB)

        // read extras (accept both QRActivity.EXTRA_* and local constants)
        gatewayId = intent.getStringExtra(QRActivity.EXTRA_GATEWAY) ?:
                    intent.getStringExtra(EXTRA_GATEWAY).orEmpty()

        bedId     = intent.getStringExtra(QRActivity.EXTRA_BED) ?:
                    intent.getStringExtra(EXTRA_BED).orEmpty()

        locationId = intent.getStringExtra(EXTRA_LOCATION).orEmpty()

        intent.getStringExtra(QRActivity.EXTRA_IMAGE_URI)
            ?.let { imageUri = Uri.parse(it) }
        if (imageUri == null) {
            intent.getStringExtra(EXTRA_IMAGE_URI)?.let { imageUri = Uri.parse(it) }
        }

        // show what we have
        txtGateway.text  = "Gateway: $gatewayId"
        txtBed.text      = "Bed ID: $bedId"
        txtLocation.text = "Location ID: $locationId"
        imageUri?.let { imgPreview.setImageURI(it) }

        btnBack.setOnClickListener { finish() }

        btnNext.setOnClickListener {
            if (gatewayId.isEmpty() || bedId.isEmpty() || locationId.isEmpty()) {
                Toast.makeText(this, "Missing IDs", Toast.LENGTH_SHORT).show()
                return@setOnClickListener
            }
            txtInfo.text = "Setting location..."
            btnNext.isEnabled = false
            performSetLocation()
        }
    }

    /**
     * Performs the old "set_location" flow:
     * 1) subscribe to reply topic keyed by bedId
     * 2) publish request to gateway-scoped topic
     * 3) when reply arrives, parse and go to SummaryActivity
     */
    private fun performSetLocation() {
        val c = MqttHolder.client ?: run {
            txtInfo.text = "MQTT not connected"
            btnNext.isEnabled = true
            return
        }

        // 1) subscribe to response first
        val resp = topicSetLocationResp(bedId)
        responseTopic = resp

        c.subscribe(resp, 1, /* userContext */ null, object : IMqttActionListener {
            override fun onSuccess(asyncActionToken: org.eclipse.paho.client.mqttv3.IMqttToken?) {
                // after we are listening, publish the request
                publishSetLocation()
            }
            override fun onFailure(
                asyncActionToken: org.eclipse.paho.client.mqttv3.IMqttToken?,
                exception: Throwable?
            ) {
                txtInfo.text = "Subscribe failed: ${exception?.message}"
                btnNext.isEnabled = true
            }
        })

        // 2) capture the response message
        c.setCallback(object : MqttCallbackExtended {
            override fun connectComplete(reconnect: Boolean, serverURI: String?) {}
            override fun connectionLost(cause: Throwable?) {}

            override fun messageArrived(topic: String?, message: MqttMessage?) {
                if (topic == resp) {
                    val payload = message?.toString().orEmpty()
                    runOnUiThread { handleSetLocationResponse(payload) }
                }
            }

            override fun deliveryComplete(token: org.eclipse.paho.client.mqttv3.IMqttDeliveryToken?) {}
        })
    }

    private fun publishSetLocation(force: Boolean = false) {
        val c = MqttHolder.client ?: return
        val reqTopic = topicSetLocationReq(gatewayId)

        // match your old JSON shape
        val data = JSONObject().apply {
            put("bedId", bedId)
            put("locationId", locationId)
            put("force", force)
        }
        val req = JSONObject().apply {
            put("command", "set_location")
            put("data", data)
        }
        val payload = req.toString().toByteArray(Charsets.UTF_8)

        c.publish(reqTopic, payload, /* qos */ 1, /* retained */ false, null,
            object : IMqttActionListener {
                override fun onSuccess(asyncActionToken: org.eclipse.paho.client.mqttv3.IMqttToken?) {
                    // just wait for the response now
                }
                override fun onFailure(
                    asyncActionToken: org.eclipse.paho.client.mqttv3.IMqttToken?,
                    exception: Throwable?
                ) {
                    runOnUiThread {
                        txtInfo.text = "Publish failed: ${exception?.message}"
                        btnNext.isEnabled = true
                    }
                }
            }
        )
    }

    /**
     * Parse reply JSON and navigate to the final SummaryActivity.
     * Expected minimal JSON: {"status": 0} or {"status": 98} etc.
     * Some servers echo "data":{"locationId": "..."} â€” we keep original if missing.
     */
    private fun handleSetLocationResponse(json: String) {
        try {
            val root = JSONObject(json)
            val status = root.optInt("status", -1)

            // prefer echoed locationId if present
            val loc = root.optJSONObject("data")
                ?.optString("locationId")
                ?.takeIf { it.isNotBlank() }
                ?: locationId

            val i = Intent(this, SummaryActivity::class.java).apply {
                putExtra("gatewayId", gatewayId)
                putExtra("bedId", bedId)
                putExtra("locationId", loc)
                putExtra("status", status)
            }
            startActivity(i)
            finish()
        } catch (t: Throwable) {
            txtInfo.text = "Response parse error: ${t.message}"
            btnNext.isEnabled = true
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        // best-effort cleanup: remove callback and unsubscribe the temp topic
        try {
            MqttHolder.client?.setCallback(null)
            responseTopic?.let { topic ->
                MqttHolder.client?.unsubscribe(topic)
            }
        } catch (_: Exception) { }
    }

    // ---- topic helpers (match your old names/patterns) ----
    private fun topicSetLocationReq(gw: String)  = "gw/$gw/req/set_location"
    private fun topicSetLocationResp(bed: String) = "bed/$bed/resp/set_location"
}
